{"meta":{"title":"Blog","subtitle":"JerryZRF的Blog","description":"Never Give Up!","author":"JerryZRF","url":"https://blog.jerryzrf.cf","root":"/"},"pages":[{"title":"关于","date":"2021-07-14T11:57:55.000Z","updated":"2021-07-14T11:58:55.322Z","comments":false,"path":"about/index.html","permalink":"https://blog.jerryzrf.cf/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-07-14T11:57:53.000Z","updated":"2021-07-14T12:03:44.404Z","comments":false,"path":"categories/index.html","permalink":"https://blog.jerryzrf.cf/categories/index.html","excerpt":"","text":""},{"title":"资源","date":"2021-07-14T11:57:57.000Z","updated":"2021-07-14T12:03:26.702Z","comments":false,"path":"resources/index.html","permalink":"https://blog.jerryzrf.cf/resources/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-07-14T11:57:54.000Z","updated":"2021-07-14T12:03:13.302Z","comments":false,"path":"tags/index.html","permalink":"https://blog.jerryzrf.cf/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"语文学习的意义何在","slug":"语文学习的意义何在","date":"2022-03-16T08:56:40.000Z","updated":"2022-03-17T08:18:27.082Z","comments":true,"path":"2022/03/16/语文学习的意义何在/","link":"","permalink":"https://blog.jerryzrf.cf/2022/03/16/%E8%AF%AD%E6%96%87%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%84%8F%E4%B9%89%E4%BD%95%E5%9C%A8/","excerpt":"语文学习的意义何在 初二党，傍晚背诵古文时有感而发 这个问题，我思考过很多次。但我从来没有得到过满意的答案。","text":"语文学习的意义何在 初二党，傍晚背诵古文时有感而发 这个问题，我思考过很多次。但我从来没有得到过满意的答案。 首先，我们可以搜索义务教育语文课程标准，在此截取以下内容 义务教育语文课程标准*第一部分 前言（节选）二、课程基本理念（节选） 1234567（二）正确把握语文教育的特点语文课程是实践性课程，应着重培养学生的语文实践能力，而培养这种能力的主要途径也应是语文实践。语文课程是学生学习运用祖国语言文字的课程，学习资源和实践机会无处不在，无时不有。因而，应该让学生多读多写，日积月累，在大量的语文实践中体会、把握运用语文的规律。（节选）（三）积极倡导自主、合作、探究的学习方式语文学习应注重听说读写的相互联系，注重语文与生活的结合（节选）（四）努力建设开放而有活力的语文课程同时应密切关注现代社会发展的需要。拓宽语文学习和运用的领域，注重跨学科的学习和现代科技手段的运用，使学生在不同内容和方法的相互交叉、渗透和整合中开阔视野，提高学习效率，初步养成现代社会所需要的语文素养。（节选）语文课程应该是开放而富有创新活力的。要尽可能满足不同地区、不同学校、不同学生的需求，确立适应时代需要的课程目标，开发与之相适应的课程资源，形成相对稳定而又灵活的实施机制，不断地自我调节、更新发展。 三、课程设计思路（节选） 12．语文课程应注重引导学生多读书、多积累，重视语言文字运用的实践，在实践中领悟文化内涵和语文应用规律。 第二部分 课程目标与内容（节选）1232．认识中华文化的丰厚博大，汲取民族文化智慧。关心当代文化生活，尊重多样文化，吸收人类优秀文化的营养，提高文化品位。3．培育热爱祖国语言的基文字的情感，增强学习语文的自信心，养成良好的语文学习习惯，初步掌握学习语文本方法。5．能主动进行探究性学习，激发想象力和创造潜能，在实践中学习和运用语文。 二、学段目标与内容 12345678第四学段（7～9年级）（节选）（二）阅读 （节选）9．诵读古代诗词，阅读浅易文言文，能借助注释和工具书理解基本内容。注重积累、感悟和运用，提高自己的欣赏品位。（五）综合性学习1．自主组织文学活动，在办刊、演出、讨论等活动过程中，体验合作与成功的喜悦。2．能提出学习和生活中感兴趣的问题，共同讨论，选出研究主题，制订简单的研究计划。能从书刊或其他媒体中获取有关资料，讨论分析问题，独立或合作写出简单的研究报告。3．关心学校、本地区和国内外大事，就共同关注的热点问题，搜集资料，调查访问，相互讨论，能用文字、图表、图画、照片等展示学习成果。4．掌握查找资料、引用资料的基本方法，分清原始资料与间接资料的主要差别，学会注明所援引资料的出处。 第三部分 实施建议 （节选）教学建议（节选） 12345（二）教学中努力体现语文的实践性和综合性 （节选）重视学生读书、写作、口语交际、搜集处理信息等语文实践，提倡多读多写，改变机械、粗糙、繁琐的作业方式，让学生在语文实践中学习语文，学会学习。善于通过专题学习等方式，沟通课堂内外，沟通听说读写，增加学生语文实践的机会。充分利用学校、家庭和社区等教育资源，开展综合性学习活动，拓宽学生的学习空间。（五）具体建议 （节选）6．关于语法修辞知识 （节选）本标准“学段目标与内容”中涉及到语音、文字、词汇、语法、修辞、文体、文学等丰富的知识内容。在教学中应根据语文运用的实际需要，从所遇到的具体语言实例出发进行指导和点拨。指导与点拨的目的是为了帮助学生更好地识字、写字、阅读与表达，形成一定的语言应用能力和良好的语感，而不在于对知识系统的记忆。因此，要避免脱离实际运用，围绕相关知识的概念、定义进行“系统、完整”的讲授与操练。 一些文字在别的文章中看到 1此次义务教育课程标准修订过程中，反复强调要在兼顾学科逻辑的情况下更多地关注生活逻辑。什么是生活逻辑？就是学生的成长面临什么样的真实的环境，真实的需要是什么。要基于学生成长这一主线，而不是基于学科本身的发展来设计的课程。 就是学生的成长面临什么样的真实的环境，真实的需要是什么。要基于学生成长这一主线，而不是基于学科本身的发展来设计的课程。 其实我没有感受到这个变化，一点也没有。 先说感受，最直观的一点应该就是古诗文变多了，考试多了缩减句子，注音等题目。 再说分析。真实的需要是什么，真实的需要是什么，真实的需要是什么，重要的说三遍。 背诵古诗文，我在生活中用到的寥寥无几。确实，背一点有好处：我能和朋友在低落而又反转时来上一句”山重水复疑无路，柳暗花明又一村“，能在每天放学后告诉自己”学而时习之，不亦说乎“。但是，我从不会说“孤山寺北贾亭西，水面初平云脚低”，也不会说“沧州南一寺临河干，山门圮于河，二石兽并沉焉”。 学习的古诗文实词虚词，生活中很少用到。无非就是有时和朋友开玩笑时用上一句自创的文言，确实很有韵味。但是我不会说一篇两三百字的文言文让别人去理解主旨，也不会别人具体分析情感变化。 看一篇文章，名字确实”设悬吸读“：《考题打败原作者：作家周国平做自己文章的阅读理解差点不及格》 123这件事给了周国平很大的感触，他觉得这更印证了他之前的看法：“语文不是一种知识，而是一种能力。”他要呼吁大家对标准答案说“不”。他说，现在很多学生的写作往往是有套路的，大多千篇一律，缺少属于孩子最质朴真实的想法，因此他在现场提醒各位家长，看待孩子作品的时候，更应该注重作文中的童趣和独特观点。周国平对孩子的写作只有三点建议：诚实，切勿编造；准确用词表达自己的感受；简洁，不要废话。（节选） 文中的著名教育家、四川省中学语文特级教师李镇西对高中学生学习语文的方式方法的建议就是“三个字——读、写、背”。 可是《高中语文新课程标准》写道 1高中语文课程，应注重应用，加强与社会发展、科技进步的联系，加强与其他课程的沟通，更新内容，以适应现实生活和学生自我发展的需要。 文件只是“建议”事实就是如此。 学习就是为了应试。 这就是我体会到的教育现状。 你说这只是你个人的感受，那请问你要看什么感受呢？是在办公室里编辑“标准”的人的感受吗？“标准”里写得很清楚呀：学语文是为了更好地生活。没问题呀，人家感觉语文就是在生活中运用，在实践中学习呀。 “学语文是为了更好地生活”。 怎么更好地生活？ 要有更好的前途。 怎么有更好的前途？ 考上好高中，考上好大学，考上研究生、博士生。 考 学语文就是为了考试。（是不是有一种《庄子与惠子游于濠梁之上》的感觉（笑 ） 很简单，很直接，很“正确“。 不是为了考试我学他是为了什么？为了培养文化底蕴？有着背诵古诗文的时间我不如去学学UEFI，为国家紧缺的计算机底层知识做点贡献，而不是费时费力去强行把一些生活中完全用不到的东西记到一字不差。 文件上都只是建议而已。在编书的，编试卷的，教书的眼里，学语文就是为了更好的成绩罢了。** 文件只能是”建议“为什么文件只是也只能是“建议”呢？ 因为要考试。 因为要考试，所以不能时常出去社会实践；因为要考试，不能总是把文章和生活相连；因为要考试，学生不明白学语文在生活中能给予他们什么帮助。 这就是“应试”。 ”应试“是好还是坏呢？ 弊大于利。 利： 简单，快速筛选”人才“：仅需出一本有各种文章的书，调几篇大家认为很厉害的文章要求背诵。再出一份试卷，找几个“专家”来 “鉴赏”一下阅读理解就行了。 弊： 学了很多只是为了考试的东西：答题技巧、生僻古诗文……*** 不擅长语文或者没有对语文的兴趣的（比如我）根本不理解学这些东西有什么用，学完了就忘了，又痛苦又浪费时间。考试还考不好。 不要说什么努力肯定能学会的，这句话是没问题，但努力学这个干嘛？为了考试是吧，我以后工作就是为了考试是吧。 对，不考试就没有好多前途，没有未来。但是我考试考的东西未来完全用不到。但是我要考，我就要学，学了一大堆没有的东西。美名其曰”培养兴趣和思维“。培养兴趣根本不用学的这么深入；培养思维应该要专项培养，应该要深入培养感兴趣的学科，其他学科也只是为了工作、生活中能用到，而不是为了所谓”选拔人才“。不是所有人才都是“六边形战士”，也不需要人才变成“六边形战士”，我们需要的是一方面突出，其他方面均衡的人才。 而现在呢？高考状元历史B+就不能上清华北大了是吧。当初为什么出这个规则？不是为了让大家不要过分重视“主课”，也不能忽略“副科”吗？结果呢？我准备当个作家，需要很深的文学功底以及大概了解历史，你却要求我精通历史？ 何为应试？应试是指学习是为了考试，实际体现就是学习答题技巧，贴合考试模式。 关键就在考试。 考试考什么，学生就学什么。 个人观点 （不成熟，看个乐就行了）****其实应试也不是不可以，但绝对不是这种应试。 现在问题在哪？问题是我不擅长语文，但我必须学好语文，因为考试要考。 举个例子：A同学，语文98分，数学130分。B同学，语文115分，数学120分。 考试结果认为，B同学比A同学优秀。为什么？他总分高了7分。两个人都喜欢数学，成绩也都还行，A同学比B同学高10分，而这就是最难的10分，是数学的精华。从应试的角度来说，单凭这次考试成绩，B比A更优秀。但从工作生活的角度来说，我认为A更适合。为什么？因为他有一科目很突出，它可以去做相关的工作，而其他的科目很均衡，不会拖后腿，但也不会有帮助。而B呢，他去学语文，不够突出；去学数学，不够突出。他只是各方面都不错，但他没有突出。 现在的应试是真的应试，哪有什么“筛选人才”？那叫人才吗？我们不需要精通所有东西的人，只要精通他的专业且其他方面不拖后腿的人才就行了。 怎么实现真正的筛选人才呢？ 我认为应该从初中就开始分科。小学学完基础，初中文理分家。 把地理、历史、生物拉到三、四年级，物理、化学分别小学五、六年级，培养一下兴趣。当然，是作为副科存在的，仅仅只是培养兴趣，考试也没必要考。然后初中，开始选文还是理。选文就要重点学习语文、英语这种，把数学、物理等淡化成副科；选理就反之。理课最好还要在初二、初三把理和工分开，培养实用性人才。 总之，一切都是为了工作和生活服务。 番外 网络喷子多，不防真的作 Q&amp;A*P：全是节选是不是故意找出一些特例来说？带节奏，举报了！！！A：这不就是语文的魅力吗？（笑。运用文字来渲染气氛。而且文章要精简（笑，你要看可以自己去找。 **P：你胡说，老师明明都是为我们好！A：这里只是大概的说法，老师是为了我们好，但是怎么为我们好？陶冶我们的情操？确实有一定作用，但不是所有人都能理解语文之美（比如我），更何况绝大部分老师只是为了提高分数，或者为以后的语文学习打基础。而以后的语文学习为了什么？不都是为了分数吗。所以老师要么是为了陶冶你的情操（但又不适合所有人），要么是为了应试。 ***P：就举这两个例子，是不是没有别的了？A：请问答题技巧还不够多吗？请问古诗文还不够多吗？ ****P：这种建议不现实，小学压力太大了。A：小学压力一点也不大，至少在“双减”之前是如此。之所以大家都说压力大，还不是因为有所谓”内卷“？在小学学了各种各样的兴趣班，实际上真正的兴趣应该要让孩子自己去培养，他们仅需一个小小的引子。你可以让他们去看别人如何画出他们喜欢的人物，一步步带他们去学画画；你可以给他们看看他们喜欢的游戏是怎么用代码实现的，一步步带他们去学编程。而不是报个他们只有一点点兴趣甚至没有兴趣的班就完事了的，而是要先培养起扎实的兴趣再去深入学习，这是那些兴趣班做不到的。回归正题，没有课外班的小学真的是很轻松的，正好把初中的一些内容拉过来培养兴趣。当然培养兴趣不是什么应试 ，而是告诉学生这门功课有什么乐趣，有什么应用，有什么帮助。 一些杂话语文学习的意义何在，这个问题我想过很久了。但是网上的答案总是”陶冶情操“之类的，还有些人那爱国说事。但是我感受到的的语文却只是一味的背书默写、刷题背套路。 跟同学、朋友抱怨过，他们也不理解为什么要学语文，他们也会抱怨，但是我从未见过有人敢在互联网上抱怨自己内心的真实感受。”即使抱怨了也没什么用“，这应该是绝大部分人内心的感受吧。跟家长抱怨，他们也只会说是为了陶冶情操，是为了考试。他们不会跟你将讲将来用不用得到，或许会说帮助很大，结果那天我妈突然有兴趣看了我都语文书，一篇古文基本上实词、虚词都忘了个光。 你可能会说，告诉他们这些死的东西，他们就可以理解文章的意思，这就是学习到的思维方式。说的没错，但是考试中是不会给你死的东西的，应试就会让你一个活人硬生生地把死的东西记得一字不差。 回到正题，我想说的是，为什么就没有一个人敢提出来？网上有很多人喷应试教育，夸素质教育。但是素质教育在有1.56亿义务教育在校生（2020年数据）的我国可能真的有一定困难，但我们也不能在这种呆板的应试教育上浪费大量人才。可惜的是，学了那么多古诗文，也没有被淹没的人才向历代文人一样发言。 我是真的不想把青春浪费在对我没用的东西上，也不想别人的时间浪费在我身上。 你说语文对学生很重要，不管有没有用，考试占了很多分，你也没有能力去改变考试，就只能埋头苦读。 听到这段话的时候，我想笑。 不知道是对这种呆板的、愚昧的、不思进取的、无法理喻的话感到好笑，还是对这个社会的这种变态的现状感到好笑，还是对自己所处的就是这么一个死死的、无法变更的环境感到绝望而笑。 考试是为了什么？考试的初衷是什么？ 是挑选人才。人才需要会什么，考试就考什么。 而现在呢？考试就是为了淘汰一些在这几门课上总分没其他人高的学生，即使你要去学生物科学，他们也会要求你把古诗文背得一字不差；即使你去学历史，他们也会要求你把公式背得一字不差。被考试筛选出来的学生都是所谓“全面发展”的学生，其实大部分都是样样平庸，没用特殊才能。仅有很少部分是一方面突出，也能维持其它方面很强；而全方面突出更是寥寥无几。国家正处于高速发展阶段，不更应该要大量专项人才，而不是样样均衡，样样平庸的人才吗？ 哪个岗位需要人才会一字不差地背诵唐诗宋词元曲？哪个岗位需要人才能把公式死死记在脑子里？哪个岗位需要人才天天坐在办公桌前千篇一律地刷题？ 就没有人在毕业后工作时觉得很多学习的东西都用不到吗？就没有学生不知道他们学习这些有什么用吗？就没有人敢提出来吗？看来学的那么多古诗词都没什么用，从没有人敢于像前人一样发声。 不会吧不会吧，不会真的有小可爱在这里跟我扯爱国吧？这是我最不想见到的一种情况，因为每次一扯上爱国评论区就会开战。说到爱国，嗯，我就是个普通人，爱不爱国其实你不说是感觉不到的。非要说的话就是民族自尊心特别强，遇到一些辱华的恨不得喷死Ta。你们如果说我提出一点个人建议就是不爱国了，那你们可真是碍国。说难听点，历史上最经典的，不允许国民发表自己的看法的朝代：清朝，下场如何？网络上就是有你们这种******的喷子（*是我自己打的，不想爆粗口），网络环境才这么糟糕。 2022.3.17 课后作业（共100分） 本文的中心论点是什么？（3分） 本文表达了作者怎样的情感？（5分） 请从利与弊两个角度具体分析作者的建议。（两方面至少各写出一点，每点1分，最多可得6分） 你认为语文学习的意义何在呢？请简要概述。（4分） 你认为现代社会需要什么样的人才呢？请结合生活实际，用简洁的语言写出你想成为的人才（50字以下）。（前一问2分，后一位3分，共5分） 结合文章，谈谈你对语文教育的看法（100字以上，300字以下）。（每点2分，看法和分析各1分，最多可得8分） 本文于日常接触的文章有所不同，作者使用了大量换行。请结合文章具体分析其作用。（4分） 请你结合文章内容谈谈标题有何艺术效果。（3分） 概述每个二级标题下的主要内容，分别谈谈你的感想。（每点2分，概况和感想各1分，共12分） 写一篇文章，谈谈你对中国教育的看法。要求：1.结构清晰，思路明了，突出论点。2.字数大于800字，文体不限，题目自拟。3.文章可以出现真实姓名、校名（勇士，你敢吗 （50分） 历程2022.3.15 起笔 2022.3.16 上传 2022.3.17 稍作添补 2022.3.17 添加课后作业","categories":[{"name":"杂谈","slug":"杂谈","permalink":"https://blog.jerryzrf.cf/categories/%E6%9D%82%E8%B0%88/"}],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"https://blog.jerryzrf.cf/tags/%E6%9D%82%E8%B0%88/"}]},{"title":"算法-最短路径长度","slug":"算法-最短路径长度","date":"2021-07-28T02:18:39.000Z","updated":"2021-07-28T03:19:08.712Z","comments":true,"path":"2021/07/28/算法-最短路径长度/","link":"","permalink":"https://blog.jerryzrf.cf/2021/07/28/%E7%AE%97%E6%B3%95-%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6/","excerpt":"算法-贪心1 最短路径长度","text":"算法-贪心1 最短路径长度 简介 给定一个n * n的矩阵M，其中 (i, j) 表示 i 到 j 的距离为M[i][j]求start到各个点的最短路径长度 演示 0 999 10 999 30 100999 0 5 999 999 999999 999 0 50 999 999999 999 999 0 999 10999 999 999 20 0 60999 999 999 999 999 0(999表示无路可走) 以0为起点的最短路径长度是0 999 10 50 30 60 演示解析 0：0 -&gt; 0​ 0 + 0 = 0 1：0 -&gt; 1​ 0 + 999 = 999(无路可走) 2：0 -&gt; 2​ 0 + 10 = 10 3：0 -&gt; 2 -&gt; 3 || 0 -&gt; 4 -&gt; 3​ 0 + 10 + 50 = 60 || 0 + 20 + 30 = 50 4：0 -&gt; 4​ 0 + 30 = 30 5：0 -&gt; 2 -&gt; 3 -&gt; 5 || 0 -&gt; 4 -&gt; 3 -&gt; 5​ 0 + 10 + 50 + 10 = 70 || 0 + 20 + 30 + 10 = 60 思路 我们先把start到各点的路径长度当作最短路径长度，再找到其中的最小值Min，计算经过Min后的路径长度，和本来的长度比较，取出最小值. 其中我们还要一个标记向量vis，当 i 为最小值时，vis[i] 为 true，其后就不再更改. 实现12345678910111213141516171819202122232425262728293031323334int FindMinIndex(vector&lt;int&gt; &amp;v, vector&lt;bool&gt; &amp;vis)&#123; int MinIndex = 0; while(vis[MinIndex] == true) //跳过已固定的路径长度 &#123; MinIndex++; &#125; for(int i = MinIndex + 1; i &lt; v.size(); i++) &#123; if(vis[i] == true) //跳过已固定的路径长度 &#123; continue; &#125; if(v[i] &lt; v[MinIndex]) &#123; MinIndex = i; &#125; &#125; return MinIndex;&#125;// Path[i][j]: i到j的路径长度// Length[i]: start到i的最短路径长度void Dijkstra(vector&lt;vector&lt;int&gt;&gt; &amp;Paths, vector&lt;int&gt; &amp;Length, int start)&#123; vector&lt;bool&gt; vis(Paths.size(), false); //已固定标记 vis[start] = true; int MinIndex; Length = Paths[start]; //初始化最短路径长度 for(int i = 1; i &lt; Paths.size(); i++) &#123; MinIndex = FindMinIndex(Length, vis); //start到MinIndex最短 vis[MinIndex] = true; //标记 for(int j = 0; j &lt; Length.size(); j++) &#123; if(vis[j] == true) //跳过已固定的路径长度 &#123; continue; &#125; //更新从start出发的最短路径长度 Length[j] = min(Paths[MinIndex][j] + Length[MinIndex], Length[j]); &#125; &#125;&#125; END 本文就到这里了，接下来你可以自己写一个函数，求出怎么走是最短路径.","categories":[{"name":"Cpp","slug":"Cpp","permalink":"https://blog.jerryzrf.cf/categories/Cpp/"}],"tags":[{"name":"Cpp","slug":"Cpp","permalink":"https://blog.jerryzrf.cf/tags/Cpp/"},{"name":"算法","slug":"算法","permalink":"https://blog.jerryzrf.cf/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"算法-最长公共子串","slug":"算法-最长公共子串","date":"2021-07-18T11:39:58.000Z","updated":"2022-03-17T07:30:36.962Z","comments":true,"path":"2021/07/18/算法-最长公共子串/","link":"","permalink":"https://blog.jerryzrf.cf/2021/07/18/%E7%AE%97%E6%B3%95-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2/","excerpt":"算法-字符串1 最长公共子串","text":"算法-字符串1 最长公共子串 简介 在两个字符串中，找到最长公共子串(Longest Common Subsequence)的长度.即最长的相同的一段的长度 演示 字符串A: “abcjerryzrfdef”字符串B: “ajerryzrfbcdefgh” 它们的最长公共子串的长度为8. 演示解析 字符串A: “abcjerryzrfde”字符串B: “ajerryzrfb” 他们的最长公共子串为”jerryzrf”. 实现Version 1 (暴力枚举)暴力枚举yyds 12345678910111213141516171819202122int GetLCSLength(string &amp;strA, string &amp;strB)&#123; int lengthA = strA.length(); int lengthB = strB.length(); int length = 0; //公共子串长度 int MaxLength = 0; //最长公共子串长度 for(int i = 0; i &lt; lengthA; i++) &#123; for(int j = 0; j &lt; lengthB; j++) &#123; while(strA[i] == strB[j] &amp;&amp; i &lt; lengthA &amp;&amp; j &lt; lengthB) //找到公共子序列 &#123; i++; j++; length++; &#125; MaxLength = max(length, MaxLength); //更新最长公共子串长度 length = 0; //公共子串长度归零 &#125; &#125; return MaxLength;&#125; 可以看到这种暴力枚举的性能在大量数据情况下很差，时间复杂度大概为O(lengthA * lengthB)，接下来我们用上另一种算法. Version 2 (数组矩阵) 求最长公共子串长度，就是求字符串A和字符串B中最长重复的地方的长度，于是我们可以摆出字符串A和字符串B，把它们放在矩阵中，相同的地方为true，否则为false.如字符串A: “abcjerryzrfde”字符串B: “ajerryzrfb”&nbsp;&nbsp;&nbsp;a b c &nbsp;j&nbsp;e&nbsp;r&nbsp; r&nbsp; y z r &nbsp;fa 1 0 0 0 0 0 0 0 0 0 0j 0 0 0 1 0 0 0 0 0 0 0e 0 0 0 0 1 0 0 0 0 0 0r 0 0 0 0 0 1 1 0 0 1 1r 0 0 0 0 0 1 1 0 0 1 1y 0 0 0 0 0 0 0 1 0 0 0z 0 0 0 0 0 0 0 0 1 0 0r 0 0 0 0 0 0 0 0 0 1 0f 0 0 0 0 0 0 0 0 0 0 1b 0 1 0 0 0 0 0 0 0 0 0 从中我们可以发现，公共子串就是一条斜线.所以我们可以写一个函数，求出每一条斜线中连续部分的长度，其中最长的长度，即为最长公共子串的长度 当我们计算最长连续斜线长度时，我们就会发现一个问题：如何表示当前计算的是哪一条斜线？这时候我们就把对角线看作 0 ，左下的是负数，右上的是正数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061//在(lengthA * lengthB)的矩阵中，获取从 k 开始的斜线长度int GetObliqueLength(bool matrix[][100001], int lengthA, int lengthB, int k)&#123; //初始化 bool ObliqueLine[100001]; //斜线 int cnt = 0; //斜线长度 int x, y; //开始的(x, y)坐标 if (k &lt; 0) //在左下部分 &#123; x = -k; y = 0; &#125; else &#123; //在右上部分或为对角线 x = 0; y = k; &#125; //获取斜线 while (x &lt; lengthA &amp;&amp; y &lt; lengthB) &#123; ObliqueLine[cnt++] = matrix[x++][y++]; &#125; //计算最长连续斜线长度 int length = 0; //连续斜线长度 int MaxLength = 0; //最长连续斜线长度 for (int i = 0; i &lt; cnt; i++) &#123; if (ObliqueLine[i] == false) //不连续 &#123; MaxLength = max(length, MaxLength); //更新最长连续斜线长度 length = 0; //连续斜线长度归零 continue; &#125; length++; //连续斜线长度增加 &#125; return max(length, MaxLength); //返回最长连续斜线长度&#125;//获取最长公共子串的长度//Longest Common Subsequenceint GetLCSLength(string &amp;strA, string &amp;strB)&#123; int lengthA = strA.length(); int lengthB = strB.length(); //转换为矩阵 bool matrix[lengthA][100001]; for (int i = 0; i &lt; lengthA; i++) &#123; for(int j = 0; j &lt; lengthB; j++) &#123; matrix[i][j] = strA[i] == strB[j]; &#125; &#125; //找到最长连续斜线 int max = 0; for (int i = -lengthA + 1; i &lt; lengthB; i++) &#123; int length = GetObliqueLength(matrix, lengthA, lengthB, i); max = (length &gt; max) ? length : max; &#125; return max;&#125; 该版本用的是数组写的，可能有点丑，接下来是一个用vector写的. Version 3 (vector矩阵)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960//在(lengthA * lengthB)的矩阵中，获取从 k 开始的斜线长度int GetObliqueLength(vector&lt;vector&lt;bool&gt;&gt; &amp;matrix, int k)&#123; //初始化 vector&lt;bool&gt; ObliqueLine; //斜线 int cnt = 0; //斜线长度 int x, y; //开始的(x, y)坐标 if(k &lt; 0) //在左下部分 &#123; x = -k; y = 0; &#125;else&#123; //在右上部分或为对角线 x = 0; y = k; &#125; //获取斜线 while(x &lt; matrix.size() &amp;&amp; y &lt; matrix[0].size()) &#123; ObliqueLine.push_back(matrix[x++][y++]); &#125; //计算最长连续斜线长度 int length = 0; //连续斜线长度 int MaxLength = 0; //最长连续斜线长度 for(vector&lt;bool&gt;::iterator it = ObliqueLine.begin(); it != ObliqueLine.end(); it++) &#123; if(*it == false) //不连续 &#123; MaxLength = max(length, MaxLength); //更新最长连续斜线长度 length = 0; //连续斜线长度归零 continue; &#125; length++; //连续斜线长度增加 &#125; return max(length, MaxLength); //返回最长连续斜线长度&#125;//获取最长公共子串的长度//Longest Common Subsequenceint GetLCSLength(string &amp;strA, string &amp;strB)&#123; int lengthA = strA.length(); int lengthB = strB.length(); //转换为矩阵 vector&lt;vector&lt;bool&gt;&gt; matrix(lengthA, vector&lt;bool&gt;(lengthB, false)); for(int i = 0; i &lt; lengthA; i++) &#123; for(int j = 0; j &lt; lengthB; j++) &#123; matrix[i][j] = strA[i] == strB[j]; &#125; &#125; //找到最长连续斜线 int max = 0; for(int i = -lengthA + 1; i &lt; lengthB; i++) &#123; int length = GetObliqueLength(matrix, i); max = (length &gt; max) ? length : max; &#125; return max;&#125; 别忘了 1#include &lt;vector&gt; END 本文就到这里了，接下来你可以自己写一个函数，求出最长公共子串和其长度.暴力枚举yyds!","categories":[{"name":"Cpp","slug":"Cpp","permalink":"https://blog.jerryzrf.cf/categories/Cpp/"}],"tags":[{"name":"Cpp","slug":"Cpp","permalink":"https://blog.jerryzrf.cf/tags/Cpp/"},{"name":"算法","slug":"算法","permalink":"https://blog.jerryzrf.cf/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"算法-排序-堆","slug":"算法-排序-堆","date":"2021-07-18T04:14:52.000Z","updated":"2021-07-18T11:40:25.262Z","comments":true,"path":"2021/07/18/算法-排序-堆/","link":"","permalink":"https://blog.jerryzrf.cf/2021/07/18/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E5%A0%86/","excerpt":"算法-排序5 堆排序","text":"算法-排序5 堆排序 特点 不稳定 较难理解(一时的) 简介 堆排序，顾名思义，用”堆”(完全二叉树)来排序. 堆又分两种：小根堆(分支节点小于它的子节点)(降序)、大根堆(分支节点大于它的子节点)(升序). 经过实验得知，完全二叉树的最后一个分支节点是n / 2 - 1. 演示 原始数据(8个)7 4 8 3 2 5 1 6 1234 7 4 8 3 2 5 16 建堆从下至上，依次调整分支节点 i = 3 1234 7 4 8 3 2 5 16 i = 2 1234 7 4 1 3 2 5 86 i = 1 1234 7 2 1 3 4 5 86 i = 0 1234 1 2 5 3 4 5 86 排序(出堆)首尾交换，调整根节点 i = 7 1234 2 3 5 6 4 7 8(1) i = 6 1234 3 4 5 6 8 7 (2)(1) i = 5 1234 4 6 5 7 8 (3) (2)(1) i = 4 1234 5 6 8 7 (4) (3) (2)(1) i = 3 1234 6 7 8 (5) (4) (3) (2)(1) i = 2 1234 7 8 (6) (5) (4) (3) (2)(1) i = 1 1234 8 (7) (6) (5) (4) (3) (2)(1) 至此，数据已经变成有序. 实现123456789101112131415161718192021222324252627282930313233//在有n个节点的堆中调整第k个节点void HeapShift(int array[], int n, int k)&#123; while(k * 2 + 1 &lt; n) //为分支节点(有孩子) &#123; int child = k * 2 + 1; //左右孩子的最小值的下标，默认为左孩子的下标 if(child + 1 &lt; n &amp;&amp; array[child + 1] &lt; array[child]) //有右孩子，且比左孩子小 &#123; child++; //更新左右孩子的最小值的下标为右孩子的下标 &#125; if(array[child] &gt; array[k]) //左右孩子的最小值比父大(调整完毕) &#123; return; //结束 &#125; swap(array[child], array[k]); //交换 k = child; //调整下一个 &#125;&#125;void Sort(int array[], int n)&#123; //建堆：从下至上依次调整分支节点 for(int i = n / 2 - 1; i &gt;= 0; i--) &#123; HeapShift(array, n, i); &#125; //排序(出堆)：首尾交换，调整根节点 for(int i = n - 1; i &gt; 0; i--) &#123; swap(array[0], array[i]); HeapShift(array, i, 0); &#125;&#125; END 堆排序理解起来可能有点困难，需要你多用数据模拟几次. 接下来还有桶、希尔排序等.","categories":[{"name":"Cpp","slug":"Cpp","permalink":"https://blog.jerryzrf.cf/categories/Cpp/"}],"tags":[{"name":"Cpp","slug":"Cpp","permalink":"https://blog.jerryzrf.cf/tags/Cpp/"},{"name":"算法","slug":"算法","permalink":"https://blog.jerryzrf.cf/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"算法-排序-快速","slug":"算法-排序-快速","date":"2021-07-17T07:20:25.000Z","updated":"2021-07-18T11:40:38.603Z","comments":true,"path":"2021/07/17/算法-排序-快速/","link":"","permalink":"https://blog.jerryzrf.cf/2021/07/17/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E5%BF%AB%E9%80%9F/","excerpt":"算法-排序4 快速排序","text":"算法-排序4 快速排序 特点 不稳定 平均性能高 简介 快速排序，顾名思义，很快. STL库中的sort()函数用的就是快速排序. 演示 原始数据(8个)X 4 8 3 2 5 1 6基准值 X = 7 第一次处理6 4 8 3 2 5 1 Xi j 第二次处理6 4 X 3 2 5 1 8 i j 第三次处理6 4 1 3 2 5 X 8 i j 第四次处理6 4 1 3 2 5 X 8 ij 放回原位 6 4 1 3 2 5 7 8 演示解析 经过处理，数据变成了两部分。在a[i]左侧的是比它小的数字，右侧的是比它大的数字.我们再将左侧进行处理，右侧进行处理，以此递归，直到左侧下标大于右侧下标，最终数据将变得有序. 实现1234567891011121314151617181920212223242526272829303132333435363738int Part(int array[], int start, int end)&#123; int X = array[start]; while(start &lt; end) &#123; while(array[end] &gt; X &amp;&amp; start &lt; end) //越界检查 &#123; end--; //找到右侧第一个比参考值小的 &#125; if(start &lt; end) //越界检查 &#123; array[start] = array[end]; //交换 start++; &#125; while(array[start] &lt; X &amp;&amp; start &lt; end) //越界检查 &#123; start++; //找到左侧第一个比参考值大的 &#125; if(start &lt; end) //越界检查 &#123; array[end] = array[start]; //交换 end--; &#125; &#125; //循环结束：start == end array[start] = X; return start;&#125;void Sort(int array[], int start, int end)&#123; if(start &gt;= end) //越界检查 return; int part = Part(array, start, end); //分治 Sort(array, start, part - 1); //左半边 Sort(array, part + 1, end); //右半边&#125; END 快速排序是一种性能较高的排序. 递归可能有点难以理解，最好自己拿数据试一试.接下来还有快速、堆、桶排序等.","categories":[{"name":"Cpp","slug":"Cpp","permalink":"https://blog.jerryzrf.cf/categories/Cpp/"}],"tags":[{"name":"Cpp","slug":"Cpp","permalink":"https://blog.jerryzrf.cf/tags/Cpp/"},{"name":"算法","slug":"算法","permalink":"https://blog.jerryzrf.cf/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"算法-排序-插入","slug":"算法-排序-插入","date":"2021-07-17T05:20:02.000Z","updated":"2021-07-18T11:40:25.999Z","comments":true,"path":"2021/07/17/算法-排序-插入/","link":"","permalink":"https://blog.jerryzrf.cf/2021/07/17/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E6%8F%92%E5%85%A5/","excerpt":"算法-排序3 插入排序","text":"算法-排序3 插入排序 特点 简单 对少量数据性能较好 稳定 简介 插入排序，顾名思义，把待排序的数据插入到应该在的位置. 演示 原始数据(8个)7 4 8 3 2 5 1 6 第一次排序7 4 8 3 2 5 1 6 第二次排序4 7 8 3 2 5 1 6 第三次排序4 7 8 3 2 5 1 6 第四次排序3 4 7 8 2 5 1 6 第五次排序2 3 4 7 8 5 1 6 第六次排序2 3 4 5 7 8 1 6 第七次排序1 2 3 4 5 7 8 6 第八次排序1 2 3 4 5 6 7 8 演示解析 第 i 次排序，是将a[i]从 i 向前移动 j 个数字，直到a[j]小于a[i]。 实现12345678910void Sort(int array[], int n)&#123; for(int i = 0; i &lt; n; i++) &#123; int j; for(int j = i; j &gt; 0 &amp;&amp; array[j] &lt; array[j - 1]; j--) //当a[j]大于a[j - i]且没越界 swap(array[j], array[j - 1]); //向后移动 array[j - 1] = array[i]; //填充空位 &#125;&#125; END 插入排序依旧是一中较为简单的排序，接下来还有快速、堆、桶排序等。","categories":[{"name":"Cpp","slug":"Cpp","permalink":"https://blog.jerryzrf.cf/categories/Cpp/"}],"tags":[{"name":"Cpp","slug":"Cpp","permalink":"https://blog.jerryzrf.cf/tags/Cpp/"},{"name":"算法","slug":"算法","permalink":"https://blog.jerryzrf.cf/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"算法-排序-选择","slug":"算法-排序-选择","date":"2021-07-17T03:35:11.000Z","updated":"2021-07-18T11:40:34.233Z","comments":true,"path":"2021/07/17/算法-排序-选择/","link":"","permalink":"https://blog.jerryzrf.cf/2021/07/17/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E9%80%89%E6%8B%A9/","excerpt":"算法-排序2 选择排序","text":"算法-排序2 选择排序 特点 不稳定(你也许没听懂) 较简单(至少我认为) 简介 选择排序，顾名思义，选择一个数，放到相应的位置. 演示 原始数据(8个)7 4 8 3 2 5 1 6 第一次排序1 4 8 3 2 5 7 6 第二次排序1 2 8 3 4 5 7 6 第三次排序1 2 3 8 4 5 7 6 第四次排序1 2 3 4 8 5 7 6 第五次排序1 2 3 4 5 8 7 6 第六次排序1 2 3 4 5 6 7 8 演示解析 从数据变化中我们可以看出，每一次都选择了未排序的子序列中的最小值和当前要排序的值进行交换. 实现1234567891011121314151617181920int FindiMin(int array[], int n, int start) //找到array[start] ~ array[n - 1]中的最小值&#123; int imin = start; for(int i = start + 1; i &lt; n; i++) &#123; if(array[i] &lt; array[imin]) &#123; imin = i; &#125; &#125; return imin;&#125;void Sort(int array[], int n)&#123; for(int i = 0; i &lt; n; i++) &#123; int imin = FindiMin(array, n, i); swap(array[imin], array[i]); &#125;&#125; END 选择排序还是一种比较简单的排序方法，接下来还有插入、快速、堆、桶排序等.","categories":[{"name":"Cpp","slug":"Cpp","permalink":"https://blog.jerryzrf.cf/categories/Cpp/"}],"tags":[{"name":"Cpp","slug":"Cpp","permalink":"https://blog.jerryzrf.cf/tags/Cpp/"},{"name":"算法","slug":"算法","permalink":"https://blog.jerryzrf.cf/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"算法-排序-冒泡","slug":"算法-排序-冒泡","date":"2021-07-16T08:15:30.000Z","updated":"2021-07-18T12:31:48.978Z","comments":true,"path":"2021/07/16/算法-排序-冒泡/","link":"","permalink":"https://blog.jerryzrf.cf/2021/07/16/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E5%86%92%E6%B3%A1/","excerpt":"算法-排序前言 有人可能会说，STL库中不是有sort函数吗，为什么还有学排序呢？因为排序的基本算法还有很多功能，如快速排序的求第k小(大)的数、插入排序的一元多项式等等。 1 冒泡排序","text":"算法-排序前言 有人可能会说，STL库中不是有sort函数吗，为什么还有学排序呢？因为排序的基本算法还有很多功能，如快速排序的求第k小(大)的数、插入排序的一元多项式等等。 1 冒泡排序 特点 简单(至少我个人认为) 稳定(你也许没听懂) 简介 冒泡排序，顾名思义，小的数据像泡泡一样向上(前)浮(移动). 演示 原始数据(8个)7 4 8 3 2 5 1 6 第一次排序4 7 3 2 5 1 6 8 第二次排序4 3 2 5 1 6 7 8 第三次排序3 2 4 1 5 6 7 8 第四次排序2 3 1 4 5 6 7 8 第五次排序2 1 3 4 5 6 7 8 第六次排序1 2 3 4 5 6 7 8 演示解析 从数据变化中我们可以看出，小的数据一直再向前走，大的数据一直在向后走，就像泡泡一样，向上浮。 实现Version 1 基本版本12345678910111213void Sort(int array[], int num)&#123; for(int i = 0; i &lt; num; i++) //需要走num遍排序 &#123; for(int j = 0; j &lt; num - 1; j++) //从0比较到num-1 &#123; if(array[j] &gt; array[j + 1]) //和后面一个数比较 &#123; swap(array[j], array[j + 1]); //交换 &#125; &#125; &#125;&#125; 在这个版本中，我们可以看到需要走num遍排序，时间复杂度是O(num^2)。而像演示一样的情况中，后面两次其实是不用走到，所以我们就要一个判断，判断数据是否已经有序。 Version 2 改进版本123456789101112131415161718void Sort(int array[], int num)&#123; bool flag; for(int i = 0; i &lt; num; i++) &#123; flag = true; //是否有序 for(int j = 0; j &lt; num - 1; j++) &#123; if(array[j] &gt; array[j + 1]) //更小 &#123; swap(array[j], array[j + 1]); //交换 flag = false; //依旧无序 &#125; &#125; if(flag == true) //已经有序 break; //跳出循环 &#125;&#125; 有了有序特判，算法的性能有了小幅提高。 END 冒泡排序还是一种比较简单的排序方法，接下来还有选择、插入、快速、堆、桶排序等。","categories":[{"name":"Cpp","slug":"Cpp","permalink":"https://blog.jerryzrf.cf/categories/Cpp/"}],"tags":[{"name":"Cpp","slug":"Cpp","permalink":"https://blog.jerryzrf.cf/tags/Cpp/"},{"name":"算法","slug":"算法","permalink":"https://blog.jerryzrf.cf/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"第一篇博文","slug":"第一篇博文","date":"2021-07-14T13:03:05.000Z","updated":"2021-07-17T10:39:56.471Z","comments":true,"path":"2021/07/14/第一篇博文/","link":"","permalink":"https://blog.jerryzrf.cf/2021/07/14/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/","excerpt":"","text":"第一篇博文Hello WorldJerryZRF 的 Blog 的第一篇博文发布于 2021-7-14 21:05","categories":[{"name":"日志","slug":"日志","permalink":"https://blog.jerryzrf.cf/categories/%E6%97%A5%E5%BF%97/"}],"tags":[{"name":"日志","slug":"日志","permalink":"https://blog.jerryzrf.cf/tags/%E6%97%A5%E5%BF%97/"},{"name":"时刻","slug":"时刻","permalink":"https://blog.jerryzrf.cf/tags/%E6%97%B6%E5%88%BB/"}]}],"categories":[{"name":"杂谈","slug":"杂谈","permalink":"https://blog.jerryzrf.cf/categories/%E6%9D%82%E8%B0%88/"},{"name":"Cpp","slug":"Cpp","permalink":"https://blog.jerryzrf.cf/categories/Cpp/"},{"name":"日志","slug":"日志","permalink":"https://blog.jerryzrf.cf/categories/%E6%97%A5%E5%BF%97/"}],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"https://blog.jerryzrf.cf/tags/%E6%9D%82%E8%B0%88/"},{"name":"Cpp","slug":"Cpp","permalink":"https://blog.jerryzrf.cf/tags/Cpp/"},{"name":"算法","slug":"算法","permalink":"https://blog.jerryzrf.cf/tags/%E7%AE%97%E6%B3%95/"},{"name":"日志","slug":"日志","permalink":"https://blog.jerryzrf.cf/tags/%E6%97%A5%E5%BF%97/"},{"name":"时刻","slug":"时刻","permalink":"https://blog.jerryzrf.cf/tags/%E6%97%B6%E5%88%BB/"}]}