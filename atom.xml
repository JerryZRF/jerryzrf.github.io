<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  <subtitle>JerryZRF的Blog</subtitle>
  <link href="https://blog.jerryzrf.cf/atom.xml" rel="self"/>
  
  <link href="https://blog.jerryzrf.cf/"/>
  <updated>2021-07-17T06:37:24.237Z</updated>
  <id>https://blog.jerryzrf.cf/</id>
  
  <author>
    <name>JerryZRF</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基本算法-排序-插入</title>
    <link href="https://blog.jerryzrf.cf/2021/07/17/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E6%8F%92%E5%85%A5/"/>
    <id>https://blog.jerryzrf.cf/2021/07/17/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E6%8F%92%E5%85%A5/</id>
    <published>2021-07-17T05:20:02.000Z</published>
    <updated>2021-07-17T06:37:24.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本算法-排序"><a href="#基本算法-排序" class="headerlink" title="基本算法-排序"></a>基本算法-排序</h1><h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3 插入排序"></a>3 插入排序</h2><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><blockquote><ul><li>简单</li><li>对少量数据性能较好</li><li>稳定</li></ul></blockquote><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><blockquote><p>原始数据(8个)<br>7 4 8 3 2 5 1 6</p></blockquote><blockquote><p>第一次排序<br>7 4 8 3 2 5 1 6</p></blockquote><blockquote><p>第二次排序<br>4 7 8 3 2 5 1 6</p></blockquote><blockquote><p>第三次排序<br>4 7 8 3 2 5 1 6</p></blockquote><blockquote><p>第四次排序<br>3 4 7 8 2 5 1 6</p></blockquote><blockquote><p>第五次排序<br>2 3 4 7 8 5 1 6</p></blockquote><blockquote><p>第六次排序<br>2 3 4 5 7 8 1 6</p></blockquote><blockquote><p>第七次排序<br>1 2 3 4 5 7 8 6</p></blockquote><blockquote><p>第八次排序<br>1 2 3 4 5 6 7 8</p></blockquote><h3 id="演示解析："><a href="#演示解析：" class="headerlink" title="演示解析："></a>演示解析：</h3><blockquote><p>第 i 次排序，是将a[i]从 i 向前移动 j 个数字，直到a[j]小于a[i]。</p></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; array[j] &lt; array[j - <span class="number">1</span>]; j--)  <span class="comment">//当a[j]大于a[j - i]且没越界</span></span><br><span class="line"><span class="built_in">swap</span>(array[j], array[j - <span class="number">1</span>]);                      <span class="comment">//向后移动</span></span><br><span class="line">array[j - <span class="number">1</span>] = array[i];                               <span class="comment">//填充空位</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><blockquote><p>插入排序依旧是一中较为简单的排序，接下来还有快速、堆、桶排序等。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本算法-排序&quot;&gt;&lt;a href=&quot;#基本算法-排序&quot; class=&quot;headerlink&quot; title=&quot;基本算法-排序&quot;&gt;&lt;/a&gt;基本算法-排序&lt;/h1&gt;&lt;h2 id=&quot;3-插入排序&quot;&gt;&lt;a href=&quot;#3-插入排序&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="Cpp" scheme="https://blog.jerryzrf.cf/categories/Cpp/"/>
    
    
    <category term="Cpp" scheme="https://blog.jerryzrf.cf/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>基本算法-排序-选择</title>
    <link href="https://blog.jerryzrf.cf/2021/07/17/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E9%80%89%E6%8B%A9/"/>
    <id>https://blog.jerryzrf.cf/2021/07/17/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E9%80%89%E6%8B%A9/</id>
    <published>2021-07-17T03:35:11.000Z</published>
    <updated>2021-07-17T06:16:49.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本算法-排序"><a href="#基本算法-排序" class="headerlink" title="基本算法-排序"></a>基本算法-排序</h1><h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2 选择排序"></a>2 选择排序</h2><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><blockquote><ul><li>不稳定(<del>你也许没听懂</del>)</li><li>较简单(至少我认为)</li></ul></blockquote><h3 id="演示："><a href="#演示：" class="headerlink" title="演示："></a>演示：</h3><blockquote><p>原始数据(8个)<br>7 4 8 3 2 5 1 6</p></blockquote><blockquote><p>第一次排序<br>1 4 8 3 2 5 7 6</p></blockquote><blockquote><p>第二次排序<br>1 2 8 3 4 5 7 6</p></blockquote><blockquote><p>第三次排序<br>1 2 3 8 4 5 7 6</p></blockquote><blockquote><p>第四次排序<br>1 2 3 4 8 5 7 6</p></blockquote><blockquote><p>第五次排序<br>1 2 3 4 5 8 7 6</p></blockquote><blockquote><p>第六次排序<br>1 2 3 4 5 6 7 8</p></blockquote><h3 id="演示解析："><a href="#演示解析：" class="headerlink" title="演示解析："></a>演示解析：</h3><blockquote><p>从数据变化中我们可以看出，每一次都选择了<strong>未排序</strong>的子序列中的最小值和当前<strong>要排序</strong>的值进行交换。</p></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindiMin</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> n, <span class="keyword">int</span> start)</span>  <span class="comment">//找到array[start] ~ array[n - 1]中的最小值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> imin = start;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = start + <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(array[i] &lt; array[imin])</span><br><span class="line">&#123;</span><br><span class="line">imin = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> imin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> imin = <span class="built_in">FindiMin</span>(array, n, i);</span><br><span class="line"><span class="built_in">swap</span>(array[imin], array[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><blockquote><p>选择排序还是一种比较简单的排序方法，接下来还有插入、快速、堆、桶排序等</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本算法-排序&quot;&gt;&lt;a href=&quot;#基本算法-排序&quot; class=&quot;headerlink&quot; title=&quot;基本算法-排序&quot;&gt;&lt;/a&gt;基本算法-排序&lt;/h1&gt;&lt;h2 id=&quot;2-选择排序&quot;&gt;&lt;a href=&quot;#2-选择排序&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="Cpp" scheme="https://blog.jerryzrf.cf/categories/Cpp/"/>
    
    
    <category term="Cpp" scheme="https://blog.jerryzrf.cf/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>基本算法-排序-冒泡</title>
    <link href="https://blog.jerryzrf.cf/2021/07/16/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E5%86%92%E6%B3%A1/"/>
    <id>https://blog.jerryzrf.cf/2021/07/16/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E5%86%92%E6%B3%A1/</id>
    <published>2021-07-16T08:15:30.000Z</published>
    <updated>2021-07-17T06:36:27.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本算法-排序"><a href="#基本算法-排序" class="headerlink" title="基本算法-排序"></a>基本算法-排序</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>有人可能会说，STL库中不是有sort函数吗，为什么还有学排序呢？</p><p>因为排序的基本算法还有很多功能，如快速排序的求第k小(大)的数、插入排序的一元多项式等等。</p></blockquote><h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1 冒泡排序"></a>1 冒泡排序</h2><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><blockquote><ul><li>简单(至少我个人认为)</li><li>稳定(<del>你也许没听懂</del>)</li></ul></blockquote><h3 id="演示："><a href="#演示：" class="headerlink" title="演示："></a>演示：</h3><blockquote><p>原始数据(8个)<br>7 4 8 3 2 5 1 6</p></blockquote><blockquote><p>第一次排序<br>4 7 3 2 5 1 6 8</p></blockquote><blockquote><p>第二次排序<br>4 3 2 5 1 6 7 8</p></blockquote><blockquote><p>第三次排序<br>3 2 4 1 5 6 7 8</p></blockquote><blockquote><p>第四次排序<br>2 3 1 4 5 6 7 8</p></blockquote><blockquote><p>第五次排序<br>2 1 3 4 5 6 7 8</p></blockquote><blockquote><p>第六次排序<br>1 2 3 4 5 6 7 8</p></blockquote><h3 id="演示解析："><a href="#演示解析：" class="headerlink" title="演示解析："></a>演示解析：</h3><blockquote><p>从数据变化中我们可以看出，小的数据一直再向前走，大的数据一直在向后走，就像泡泡一样，向上浮。</p></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="Version-1-基本版c本"><a href="#Version-1-基本版c本" class="headerlink" title="Version 1 基本版c本"></a>Version 1 基本版c本</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)               <span class="comment">//需要走num遍排序</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num - <span class="number">1</span>; j++)       <span class="comment">//从0比较到num-1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(array[j] &gt; array[j + <span class="number">1</span>])        <span class="comment">//和后面一个数比较</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(array[j], array[j + <span class="number">1</span>]);  <span class="comment">//交换</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 在这个版本中，我们可以看到需要走num遍排序，时间复杂度是O(num^2)。而像演示一样的情况中，后面两次其实是不用走到，所以我们就要一个判断，判断数据是否已经有序。</p></blockquote><h4 id="Version-2-改进版本"><a href="#Version-2-改进版本" class="headerlink" title="Version 2 改进版本"></a>Version 2 改进版本</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">true</span>;                              <span class="comment">//是否有序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num - <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(array[j] &gt; array[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(array[j], array[j + <span class="number">1</span>]);</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="literal">true</span>)                         <span class="comment">//已经有序</span></span><br><span class="line"><span class="keyword">break</span>;                               <span class="comment">//跳出循环</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有了有序特判，算法的性能有了小幅提高。</p></blockquote><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><blockquote><p>冒泡排序还是一种比较简单的排序方法，接下来还有选择、插入、快速、堆、桶排序等。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本算法-排序&quot;&gt;&lt;a href=&quot;#基本算法-排序&quot; class=&quot;headerlink&quot; title=&quot;基本算法-排序&quot;&gt;&lt;/a&gt;基本算法-排序&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前</summary>
      
    
    
    
    <category term="Cpp" scheme="https://blog.jerryzrf.cf/categories/Cpp/"/>
    
    
    <category term="Cpp" scheme="https://blog.jerryzrf.cf/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博文</title>
    <link href="https://blog.jerryzrf.cf/2021/07/14/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/"/>
    <id>https://blog.jerryzrf.cf/2021/07/14/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/</id>
    <published>2021-07-14T13:03:05.000Z</published>
    <updated>2021-07-15T10:20:04.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一篇博文"><a href="#第一篇博文" class="headerlink" title="第一篇博文"></a>第一篇博文</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>JerryZRF 的 Blog 的第一篇博文<br>发布于 2021-7-14 21:05</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一篇博文&quot;&gt;&lt;a href=&quot;#第一篇博文&quot; class=&quot;headerlink&quot; title=&quot;第一篇博文&quot;&gt;&lt;/a&gt;第一篇博文&lt;/h1&gt;&lt;h2 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="日志" scheme="https://blog.jerryzrf.cf/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="日志" scheme="https://blog.jerryzrf.cf/tags/%E6%97%A5%E5%BF%97/"/>
    
    <category term="时刻" scheme="https://blog.jerryzrf.cf/tags/%E6%97%B6%E5%88%BB/"/>
    
  </entry>
  
</feed>
