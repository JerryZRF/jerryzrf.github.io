<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  <subtitle>JerryZRF的Blog</subtitle>
  <link href="https://blog.jerryzrf.cf/atom.xml" rel="self"/>
  
  <link href="https://blog.jerryzrf.cf/"/>
  <updated>2022-05-26T14:02:02.850Z</updated>
  <id>https://blog.jerryzrf.cf/</id>
  
  <author>
    <name>JerryZRF</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>526小结-附加</title>
    <link href="https://blog.jerryzrf.cf/2022/05/26/526%E5%B0%8F%E7%BB%93-%E9%99%84%E5%8A%A0/"/>
    <id>https://blog.jerryzrf.cf/2022/05/26/526%E5%B0%8F%E7%BB%93-%E9%99%84%E5%8A%A0/</id>
    <published>2022-05-26T12:23:25.000Z</published>
    <updated>2022-05-26T14:02:02.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2022-05-26"><a href="#2022-05-26" class="headerlink" title="2022-05-26"></a>2022-05-26</h1><blockquote><p>都内卷是吧，小结写三面是吧，我直接写1500字</p></blockquote><span id="more"></span><h2 id="五二六事变"><a href="#五·二六事变" class="headerlink" title="五·二六事变"></a>五·二六事变</h2><blockquote><p>作业解体，八班剧变，和平结束</p></blockquote><p>今天，发生了惨烈的五·二六事变。</p><p>只因为一个同学，在昨日的作业记录表中的小结里写道”数学作业很少“，甚至在晚辅的时候无聊到发呆，所以数学老师特别”贴心地“多布置了一张学案作为回家作业。</p><p>为什么交给英语老师的作业记录本里记得内容会被数学老师看到啊啊啊啊！</p><p>很明显，肯定是英语老师看到了，准备给我们多布置一点作业，顺便告诉数学老师的。</p><p>所以今天的英语作业也特别多（虽然我上午就差不多写完了</p><p>所以得出结论：还是物理好</p><p>但是做这么多题真的有用吗？（指英语做的题70%是重复的）</p><p>我们应该要高效的学习，而不是肤浅的刷题。（内涵某个叫《家校通》的东西，大胆预言一波，这个将会变成暑假作业）</p><h2 id="solarterms"><a href="#SolarTerms" class="headerlink" title="SolarTerms"></a>SolarTerms</h2><p>嗯，这个东西基本的都写好了。</p><p>其实我一开始想用Unreal Engine 5做一个太阳系模型，模拟地球在每一个节气的位置的。但是看了看文件，说要联系生活实际，要实地考察，便放弃了这个想法（实际上是我不会用UE5）</p><p>所以就该做Android App了。顺带一说，这个IDEA是我白嫖的，但是我非常不提倡这种做法！！！但是开源的Community版本用用不了Android Studio的功能，所以只好白嫖一下了。</p><p>现在的成果的话，因为不太方便放图（懒），就附一个github的链接了，想看成果的可以自己构建。（仅有Android版本，iOS版需要一台Mac，还要学Objective-C，只得以作罢）</p><p><a href="https://www.github.com/JerryZRF/SolarTerms">https://www.github.com/JerryZRF/SolarTerms</a></p><p>嗯，写得很渣。水平有限，又不是不能跑。</p><p>下次有空录个视频吧</p><h2 id="论内卷"><a href="#论内卷" class="headerlink" title="论内卷"></a>论内卷</h2><p>内卷是一种奇怪的现象。</p><p>有些同学的内卷就是以最快的速度做完老师布置的任务。</p><p>有些同学的内卷就是抽空去刷题。</p><p>有些同学的内卷是用空闲时间去学习课内外的新知识。</p><p>嗯，这是个递进关系。</p><p>要先完成任务，在去拓展，再去发展兴趣。</p><p>很不巧，我是一个很懒的人。我只做到了1和3（拜托，真的有这么上进的好孩子去刷难题吗，我都躺平了）</p><p>哎，我每天写完作业就刷会B站，写写代码了。完全没有动力刷难题，也没有时间刷难题。写代码是真的耗时间，一个小bug改1个小时是日常好吧。大bug还好改，好发现原因；小bug真的是恶心，有时候就是一条语句写得差了点意思，就出现大问题。</p><p>其实我在学校里感觉很卷，其实还是为了快点完成作业，回家可以休息。可能我定了很多计划，但是真的就没有动力去执行。</p><p>但是，我也已经有了一个大计划！</p><p>——我真的要好好去学JVM底层了！真的很重要，学好了之后思维应该会有很大的提升。至于学完了之后（应该要很久，毕竟也不简单，说不定就烂尾了），学GoLang什么的真的没有动力，哎。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>说到现在好像也没说今天做了什么。</p><p>其实今天真的没做什么，到家后作业写完了，就娱乐了一小会，就8点了。然后加了一个按钮，改了一点点配置文件，确定了AR相机可以跑起来，就结束了。</p><p>一回想起来，浪费时间的地方真的很多。</p><ul><li><p>因为模拟器没有摄像头，就用实体机，结果接了数据线没反应，想用adb，结果找不到放哪里了。找了半天，在官网下了一个，结果感觉有没什么用，才用QQ把apk传过去（15mins+）</p></li><li><p>布局编辑器怪怪的今天，用起来出了点问题。写Activity转跳时有脑子抽筋了，多花了几分钟。（10mins+）</p></li></ul><p>其它都想不起来了，哎，精神状态不佳呀。不过今天Great FireWall很给面子，一次就push成功了</p><p>话说我在写完这个之后，应该会找一个CDN把我的blog弄上去，这样访问就会快很多了。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;2022-05-26&quot;&gt;&lt;a href=&quot;#2022-05-26&quot; class=&quot;headerlink&quot; title=&quot;2022-05-26&quot;&gt;&lt;/a&gt;2022-05-26&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;都内卷是吧，小结写三面是吧，我直接写1500字&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="小结" scheme="https://blog.jerryzrf.cf/categories/%E5%B0%8F%E7%BB%93/"/>
    
    
    <category term="小结" scheme="https://blog.jerryzrf.cf/tags/%E5%B0%8F%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>算法-最短路径长度</title>
    <link href="https://blog.jerryzrf.cf/2021/07/28/%E7%AE%97%E6%B3%95-%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6/"/>
    <id>https://blog.jerryzrf.cf/2021/07/28/%E7%AE%97%E6%B3%95-%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6/</id>
    <published>2021-07-28T02:18:39.000Z</published>
    <updated>2021-07-28T03:19:08.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法-贪心"><a href="#算法-贪心" class="headerlink" title="算法-贪心"></a>算法-贪心</h1><h2 id="1-最短路径长度"><a href="#1-最短路径长度" class="headerlink" title="1 最短路径长度"></a>1 最短路径长度</h2><span id="more"></span><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>给定一个n * n的矩阵M，其中 (i, j) 表示 i 到 j 的距离为M[i][j]<br>求start到各个点的最短路径长度</p></blockquote><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><blockquote><p>0   999   10  999   30  100<br>999    0    5  999 999  999<br>999 999   0    50 999  999<br>999 999 999    0 999    10<br>999 999 999  20     0     60<br>999 999 999  999 999    0<br>(999表示无路可走)</p><p>以0为起点的最短路径长度是0  999  10  50  30  60</p></blockquote><h3 id="演示解析"><a href="#演示解析" class="headerlink" title="演示解析"></a>演示解析</h3><blockquote><p>0：0 -&gt; 0<br>​       0 + 0 = 0</p><p>1：0 -&gt; 1<br>​      0 + 999 = 999(无路可走)</p><p>2：0 -&gt; 2<br>​      0 + 10 = 10</p><p>3：0 -&gt; 2 -&gt; 3              ||  0 -&gt; 4 -&gt; 3<br>​      0 + 10 + 50 = 60    ||  0 + 20 + 30 = 50</p><p>4：0 -&gt; 4<br>​       0 + 30 = 30</p><p>5：0 -&gt; 2 -&gt; 3 -&gt; 5                || 0 -&gt; 4 -&gt; 3 -&gt; 5<br>​      0 + 10 + 50 + 10 = 70    ||  0 + 20 + 30 + 10 = 60</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote><p>我们先把start到各点的路径长度当作最短路径长度，再找到其中的最小值Min，计算经过Min后的路径长度，和本来的长度比较，取出最小值.</p><p>其中我们还要一个标记向量vis，当 i 为最小值时，vis[i] 为 true，其后就不再更改.</p></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindMinIndex</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;v, vector&lt;<span class="keyword">bool</span>&gt; &amp;vis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> MinIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(vis[MinIndex] == <span class="literal">true</span>)  <span class="comment">//跳过已固定的路径长度</span></span><br><span class="line">&#123;MinIndex++;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = MinIndex + <span class="number">1</span>; i &lt; v.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i] == <span class="literal">true</span>)       <span class="comment">//跳过已固定的路径长度</span></span><br><span class="line">&#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(v[i] &lt; v[MinIndex])</span><br><span class="line">&#123;MinIndex = i;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> MinIndex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Path[i][j]: i到j的路径长度</span></span><br><span class="line"><span class="comment">// Length[i]: start到i的最短路径长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; &amp;Paths, vector&lt;<span class="keyword">int</span>&gt; &amp;Length, <span class="keyword">int</span> start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">vis</span><span class="params">(Paths.size(), <span class="literal">false</span>)</span></span>;    <span class="comment">//已固定标记</span></span><br><span class="line">vis[start] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> MinIndex;</span><br><span class="line">Length = Paths[start];                    <span class="comment">//初始化最短路径长度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; Paths.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">MinIndex = <span class="built_in">FindMinIndex</span>(Length, vis); <span class="comment">//start到MinIndex最短</span></span><br><span class="line">vis[MinIndex] = <span class="literal">true</span>;                 <span class="comment">//标记</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Length.<span class="built_in">size</span>(); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j] == <span class="literal">true</span>)                <span class="comment">//跳过已固定的路径长度</span></span><br><span class="line">&#123;<span class="keyword">continue</span>;&#125;                 <span class="comment">//更新从start出发的最短路径长度</span></span><br><span class="line">Length[j] = <span class="built_in">min</span>(Paths[MinIndex][j] + Length[MinIndex], Length[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="end"><a href="#END" class="headerlink" title="END"></a>END</h3><blockquote><p>本文就到这里了，接下来你可以自己写一个函数，求出怎么走是最短路径.</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法-贪心&quot;&gt;&lt;a href=&quot;#算法-贪心&quot; class=&quot;headerlink&quot; title=&quot;算法-贪心&quot;&gt;&lt;/a&gt;算法-贪心&lt;/h1&gt;&lt;h2 id=&quot;1-最短路径长度&quot;&gt;&lt;a href=&quot;#1-最短路径长度&quot; class=&quot;headerlink&quot; title=&quot;1 最短路径长度&quot;&gt;&lt;/a&gt;1 最短路径长度&lt;/h2&gt;</summary>
    
    
    
    <category term="Cpp" scheme="https://blog.jerryzrf.cf/categories/Cpp/"/>
    
    
    <category term="Cpp" scheme="https://blog.jerryzrf.cf/tags/Cpp/"/>
    
    <category term="算法" scheme="https://blog.jerryzrf.cf/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-最长公共子串</title>
    <link href="https://blog.jerryzrf.cf/2021/07/18/%E7%AE%97%E6%B3%95-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2/"/>
    <id>https://blog.jerryzrf.cf/2021/07/18/%E7%AE%97%E6%B3%95-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2/</id>
    <published>2021-07-18T11:39:58.000Z</published>
    <updated>2022-03-17T07:30:36.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法-字符串"><a href="#算法-字符串" class="headerlink" title="算法-字符串"></a>算法-字符串</h1><h2 id="1-最长公共子串"><a href="#1-最长公共子串" class="headerlink" title="1 最长公共子串"></a>1 最长公共子串</h2><span id="more"></span><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>在两个字符串中，找到最长公共子串(Longest Common Subsequence)的长度.<br><del>即最长的相同的一段的长度</del></p></blockquote><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><blockquote><p>字符串A: “abcjerryzrfdef”<br>字符串B: “ajerryzrfbcdefgh”</p><p>它们的最长公共子串的长度为8.</p></blockquote><h3 id="演示解析"><a href="#演示解析" class="headerlink" title="演示解析"></a>演示解析</h3><blockquote><p>字符串A: “abc<strong>jerryzrf</strong>de”<br>字符串B: “a<strong>jerryzrf</strong>b”</p><p>他们的最长公共子串为”jerryzrf”.</p></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="version-1-暴力枚举"><a href="#Version-1-暴力枚举" class="headerlink" title="Version 1 (暴力枚举)"></a>Version 1 (暴力枚举)</h4><p><del>暴力枚举yyds</del></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLCSLength</span><span class="params">(string &amp;strA, string &amp;strB)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> lengthA = strA.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">int</span> lengthB = strB.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">int</span> length = <span class="number">0</span>;     <span class="comment">//公共子串长度</span></span><br><span class="line"><span class="keyword">int</span> MaxLength = <span class="number">0</span>;  <span class="comment">//最长公共子串长度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lengthA; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lengthB; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(strA[i] == strB[j] &amp;&amp; i &lt; lengthA &amp;&amp; j &lt; lengthB)  <span class="comment">//找到公共子序列</span></span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">length++;</span><br><span class="line">&#125;</span><br><span class="line">MaxLength = <span class="built_in">max</span>(length, MaxLength);                      <span class="comment">//更新最长公共子串长度</span></span><br><span class="line">length = <span class="number">0</span>;                                              <span class="comment">//公共子串长度归零</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> MaxLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到这种暴力枚举的性能在大量数据情况下很差，时间复杂度大概为O(lengthA * lengthB)，接下来我们用上另一种算法.</p></blockquote><h4 id="version-2-数组矩阵"><a href="#Version-2-数组矩阵" class="headerlink" title="Version 2 (数组矩阵)"></a>Version 2 (数组矩阵)</h4><blockquote><p>求最长公共子串长度，就是求字符串A和字符串B中最长重复的地方的长度，于是我们可以摆出字符串A和字符串B，把它们放在矩阵中，相同的地方为true，否则为false.<br>如<br>字符串A: “abc<strong>jerryzrf</strong>de”<br>字符串B: “a<strong>jerryzrf</strong>b”<br>&nbsp;&nbsp;&nbsp;a  b  c &nbsp;j&nbsp;e&nbsp;r&nbsp; r&nbsp; y  z  r &nbsp;f<br>a  1  0  0  0  0  0 0  0  0  0  0<br>j   0  0  0  <strong>1</strong>  0  0 0  0  0  0  0<br>e  0  0  0  0  <strong>1</strong>  0 0  0  0  0  0<br>r   0  0  0  0  0  <strong>1</strong> 1  0  0  1  1<br>r   0  0  0  0  0  1 <strong>1</strong>  0  0  1  1<br>y   0 0  0  0  0  0 0  <strong>1</strong>  0  0   0<br>z   0 0  0  0  0  0 0  0  <strong>1</strong>  0   0<br>r   0 0  0  0  0  0 0  0  0  <strong>1</strong>   0<br>f   0 0  0  0  0  0 0  0  0  0   <strong>1</strong><br>b  0 1  0  0  0  0 0  0  0  0   0</p><p>从中我们可以发现，公共子串就是一条斜线.<br>所以我们可以写一个函数，求出每一条斜线中连续部分的长度，其中最长的长度，即为最长公共子串的长度</p><p>当我们计算最长连续斜线长度时，我们就会发现一个问题：如何表示当前计算的是哪一条斜线？<br>这时候我们就把对角线看作 0 ，左下的是负数，右上的是正数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在(lengthA * lengthB)的矩阵中，获取从 k 开始的斜线长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetObliqueLength</span><span class="params">(<span class="keyword">bool</span> matrix[][<span class="number">100001</span>], <span class="keyword">int</span> lengthA, <span class="keyword">int</span> lengthB, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">bool</span> ObliqueLine[<span class="number">100001</span>]; <span class="comment">//斜线</span></span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;              <span class="comment">//斜线长度</span></span><br><span class="line"><span class="keyword">int</span> x, y;                 <span class="comment">//开始的(x, y)坐标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (k &lt; <span class="number">0</span>)                 <span class="comment">//在左下部分</span></span><br><span class="line">&#123;</span><br><span class="line">x = -k;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;                    <span class="comment">//在右上部分或为对角线</span></span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取斜线</span></span><br><span class="line"><span class="keyword">while</span> (x &lt; lengthA &amp;&amp; y &lt; lengthB)</span><br><span class="line">&#123;</span><br><span class="line">ObliqueLine[cnt++] = matrix[x++][y++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算最长连续斜线长度</span></span><br><span class="line"><span class="keyword">int</span> length = <span class="number">0</span>;          <span class="comment">//连续斜线长度</span></span><br><span class="line"><span class="keyword">int</span> MaxLength = <span class="number">0</span>;       <span class="comment">//最长连续斜线长度</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ObliqueLine[i] == <span class="literal">false</span>)              <span class="comment">//不连续</span></span><br><span class="line">&#123;</span><br><span class="line">MaxLength = <span class="built_in">max</span>(length, MaxLength);  <span class="comment">//更新最长连续斜线长度</span></span><br><span class="line">length = <span class="number">0</span>;                          <span class="comment">//连续斜线长度归零</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">length++;                                <span class="comment">//连续斜线长度增加</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(length, MaxLength);               <span class="comment">//返回最长连续斜线长度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取最长公共子串的长度</span></span><br><span class="line"><span class="comment">//Longest Common Subsequence</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLCSLength</span><span class="params">(string &amp;strA, string &amp;strB)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> lengthA = strA.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">int</span> lengthB = strB.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//转换为矩阵</span></span><br><span class="line"><span class="keyword">bool</span> matrix[lengthA][<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lengthA; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lengthB; j++)</span><br><span class="line">&#123;</span><br><span class="line">matrix[i][j] = strA[i] == strB[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到最长连续斜线</span></span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = -lengthA + <span class="number">1</span>; i &lt; lengthB; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> length = <span class="built_in">GetObliqueLength</span>(matrix, lengthA, lengthB, i);</span><br><span class="line">max = (length &gt; max) ? length : max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>该版本用的是数组写的，<del>可能有点丑</del>，接下来是一个用vector写的.</p></blockquote><h4 id="version-3-vector矩阵"><a href="#Version-3-vector矩阵" class="headerlink" title="Version 3 (vector矩阵)"></a>Version 3 (vector矩阵)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在(lengthA * lengthB)的矩阵中，获取从 k 开始的斜线长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetObliqueLength</span><span class="params">(vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt; &amp;matrix, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">vector&lt;<span class="keyword">bool</span>&gt; ObliqueLine; <span class="comment">//斜线</span></span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;              <span class="comment">//斜线长度</span></span><br><span class="line"><span class="keyword">int</span> x, y;                 <span class="comment">//开始的(x, y)坐标</span></span><br><span class="line"><span class="keyword">if</span>(k &lt; <span class="number">0</span>)                 <span class="comment">//在左下部分</span></span><br><span class="line">&#123;</span><br><span class="line">x = -k;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;                    <span class="comment">//在右上部分或为对角线</span></span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = k;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//获取斜线</span></span><br><span class="line"><span class="keyword">while</span>(x &lt; matrix.<span class="built_in">size</span>() &amp;&amp; y &lt; matrix[<span class="number">0</span>].<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line">ObliqueLine.<span class="built_in">push_back</span>(matrix[x++][y++]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算最长连续斜线长度</span></span><br><span class="line"><span class="keyword">int</span> length = <span class="number">0</span>;          <span class="comment">//连续斜线长度</span></span><br><span class="line"><span class="keyword">int</span> MaxLength = <span class="number">0</span>;       <span class="comment">//最长连续斜线长度</span></span><br><span class="line"><span class="keyword">for</span>(vector&lt;<span class="keyword">bool</span>&gt;::iterator it = ObliqueLine.<span class="built_in">begin</span>(); it != ObliqueLine.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(*it == <span class="literal">false</span>)                         <span class="comment">//不连续</span></span><br><span class="line">&#123;</span><br><span class="line">MaxLength = <span class="built_in">max</span>(length, MaxLength);  <span class="comment">//更新最长连续斜线长度</span></span><br><span class="line">length = <span class="number">0</span>;                          <span class="comment">//连续斜线长度归零</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">length++;                                <span class="comment">//连续斜线长度增加</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(length, MaxLength);               <span class="comment">//返回最长连续斜线长度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取最长公共子串的长度</span></span><br><span class="line"><span class="comment">//Longest Common Subsequence</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLCSLength</span><span class="params">(string &amp;strA, string &amp;strB)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> lengthA = strA.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">int</span> lengthB = strB.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//转换为矩阵</span></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt; <span class="built_in">matrix</span>(lengthA, vector&lt;<span class="keyword">bool</span>&gt;(lengthB, <span class="literal">false</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lengthA; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lengthB; j++)</span><br><span class="line">&#123;</span><br><span class="line">matrix[i][j] = strA[i] == strB[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到最长连续斜线</span></span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = -lengthA + <span class="number">1</span>; i &lt; lengthB; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> length = <span class="built_in">GetObliqueLength</span>(matrix, i);</span><br><span class="line">max = (length &gt; max) ? length : max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>别忘了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><h3 id="end"><a href="#END" class="headerlink" title="END"></a>END</h3><blockquote><p>本文就到这里了，接下来你可以自己写一个函数，求出最长公共子串和其长度.<br><del>暴力枚举yyds!</del></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法-字符串&quot;&gt;&lt;a href=&quot;#算法-字符串&quot; class=&quot;headerlink&quot; title=&quot;算法-字符串&quot;&gt;&lt;/a&gt;算法-字符串&lt;/h1&gt;&lt;h2 id=&quot;1-最长公共子串&quot;&gt;&lt;a href=&quot;#1-最长公共子串&quot; class=&quot;headerlink&quot; title=&quot;1 最长公共子串&quot;&gt;&lt;/a&gt;1 最长公共子串&lt;/h2&gt;</summary>
    
    
    
    <category term="Cpp" scheme="https://blog.jerryzrf.cf/categories/Cpp/"/>
    
    
    <category term="Cpp" scheme="https://blog.jerryzrf.cf/tags/Cpp/"/>
    
    <category term="算法" scheme="https://blog.jerryzrf.cf/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-排序-堆</title>
    <link href="https://blog.jerryzrf.cf/2021/07/18/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E5%A0%86/"/>
    <id>https://blog.jerryzrf.cf/2021/07/18/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E5%A0%86/</id>
    <published>2021-07-18T04:14:52.000Z</published>
    <updated>2021-07-18T11:40:25.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法-排序"><a href="#算法-排序" class="headerlink" title="算法-排序"></a>算法-排序</h1><h2 id="5-堆排序"><a href="#5-堆排序" class="headerlink" title="5 堆排序"></a>5 堆排序</h2><span id="more"></span><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote><ul><li>不稳定</li><li>较难理解(一时的)</li></ul></blockquote><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>堆排序，顾名思义，用”堆”(完全二叉树)来排序.</p><p>堆又分两种：小根堆(分支节点小于它的子节点)(降序)、大根堆(分支节点大于它的子节点)(升序).</p><p>经过实验得知，完全二叉树的最后一个分支节点是n / 2 - 1.</p></blockquote><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><blockquote><p>原始数据(8个)<br>7 4 8 3 2 5 1 6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">       7</span><br><span class="line">    4     8</span><br><span class="line">  3  2  5  1</span><br><span class="line">6  </span><br></pre></td></tr></table></figure></blockquote><h4 id="建堆"><a href="#建堆" class="headerlink" title="建堆"></a>建堆</h4><p>从下至上，依次调整分支节点 </p><blockquote><p>i = 3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">       7</span><br><span class="line">    4     8</span><br><span class="line">  3  2  5  1</span><br><span class="line">6  </span><br></pre></td></tr></table></figure></blockquote><blockquote><p>i = 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">       7</span><br><span class="line">    4     1</span><br><span class="line">  3  2  5  8</span><br><span class="line">6  </span><br></pre></td></tr></table></figure></blockquote><blockquote><p>i = 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">       7</span><br><span class="line">    2    1</span><br><span class="line">  3  4  5  8</span><br><span class="line">6  </span><br></pre></td></tr></table></figure></blockquote><blockquote><p>i = 0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">       1</span><br><span class="line">    2    5</span><br><span class="line">  3  4  5  8</span><br><span class="line">6  </span><br></pre></td></tr></table></figure></blockquote><h4 id="排序出堆"><a href="#排序-出堆" class="headerlink" title="排序(出堆)"></a>排序(出堆)</h4><p>首尾交换，调整根节点 </p><blockquote><p>i = 7</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">        2</span><br><span class="line">     3    5</span><br><span class="line">   6  4  7  8</span><br><span class="line">(1)</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>i = 6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">        3</span><br><span class="line">     4    5</span><br><span class="line">   6  8  7 (2)</span><br><span class="line">(1)</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>i = 5</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">        4</span><br><span class="line">     6     5</span><br><span class="line">   7  8 (3) (2)</span><br><span class="line">(1)</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>i = 4</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">       5</span><br><span class="line">    6     8</span><br><span class="line">  7 (4) (3) (2)</span><br><span class="line">(1)</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>i = 3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">         6</span><br><span class="line">     7       8</span><br><span class="line">  (5) (4) (3) (2)</span><br><span class="line">(1)</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>i = 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">          7</span><br><span class="line">     8      (6)</span><br><span class="line">  (5) (4) (3) (2)</span><br><span class="line">(1)</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>i = 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">          8</span><br><span class="line">    (7)     (6)</span><br><span class="line">  (5) (4) (3) (2)</span><br><span class="line">(1)</span><br></pre></td></tr></table></figure></blockquote><p>至此，数据已经变成有序.</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在有n个节点的堆中调整第k个节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapShift</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(k * <span class="number">2</span> + <span class="number">1</span> &lt; n)                               <span class="comment">//为分支节点(有孩子)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> child = k * <span class="number">2</span> + <span class="number">1</span>;                                <span class="comment">//左右孩子的最小值的下标，默认为左孩子的下标</span></span><br><span class="line"><span class="keyword">if</span>(child + <span class="number">1</span> &lt; n &amp;&amp; array[child + <span class="number">1</span>] &lt; array[child])  <span class="comment">//有右孩子，且比左孩子小</span></span><br><span class="line">&#123;</span><br><span class="line">child++;                                   <span class="comment">//更新左右孩子的最小值的下标为右孩子的下标</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(array[child] &gt; array[k])                    <span class="comment">//左右孩子的最小值比父大(调整完毕)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;                                    <span class="comment">//结束</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">swap</span>(array[child], array[k]);                  <span class="comment">//交换</span></span><br><span class="line">k = child;                                     <span class="comment">//调整下一个</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//建堆：从下至上依次调整分支节点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">HeapShift</span>(array, n, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//排序(出堆)：首尾交换，调整根节点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(array[<span class="number">0</span>], array[i]);</span><br><span class="line"><span class="built_in">HeapShift</span>(array, i, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="end"><a href="#END" class="headerlink" title="END"></a>END</h3><blockquote><p>堆排序理解起来可能有点困难，需要你多用数据模拟几次.</p><p>接下来还有桶、希尔排序等.</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法-排序&quot;&gt;&lt;a href=&quot;#算法-排序&quot; class=&quot;headerlink&quot; title=&quot;算法-排序&quot;&gt;&lt;/a&gt;算法-排序&lt;/h1&gt;&lt;h2 id=&quot;5-堆排序&quot;&gt;&lt;a href=&quot;#5-堆排序&quot; class=&quot;headerlink&quot; title=&quot;5 堆排序&quot;&gt;&lt;/a&gt;5 堆排序&lt;/h2&gt;</summary>
    
    
    
    <category term="Cpp" scheme="https://blog.jerryzrf.cf/categories/Cpp/"/>
    
    
    <category term="Cpp" scheme="https://blog.jerryzrf.cf/tags/Cpp/"/>
    
    <category term="算法" scheme="https://blog.jerryzrf.cf/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-排序-快速</title>
    <link href="https://blog.jerryzrf.cf/2021/07/17/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E5%BF%AB%E9%80%9F/"/>
    <id>https://blog.jerryzrf.cf/2021/07/17/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E5%BF%AB%E9%80%9F/</id>
    <published>2021-07-17T07:20:25.000Z</published>
    <updated>2021-07-18T11:40:38.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法-排序"><a href="#算法-排序" class="headerlink" title="算法-排序"></a>算法-排序</h1><h2 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4 快速排序"></a>4 快速排序</h2><span id="more"></span><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote><ul><li>不稳定</li><li>平均性能高</li></ul></blockquote><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p><del>快速排序，顾名思义，很快</del>.</p><p>STL库中的sort()函数用的就是快速排序.</p></blockquote><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><blockquote><p>原始数据(8个)<br>X 4 8 3 2 5 1 6<br>基准值 X = 7</p></blockquote><blockquote><p>第一次处理<br>6 4 8 3 2 5 1 X<br>i                      j</p></blockquote><blockquote><p>第二次处理<br>6 4 X 3 2 5 1 8<br>       i               j</p></blockquote><blockquote><p>第三次处理<br>6 4 1 3 2 5 X 8<br>       i               j</p></blockquote><blockquote><p>第四次处理<br>6 4 1 3 2 5 X 8<br>                   ij</p></blockquote><blockquote><p>放回原位</p><p>6 4 1 3 2 5 7 8</p></blockquote><h3 id="演示解析"><a href="#演示解析" class="headerlink" title="演示解析"></a>演示解析</h3><blockquote><p>经过处理，数据变成了<strong>两部分</strong>。在a[i]左侧的是比它小的数字，右侧的是比它大的数字.<br>我们再将左侧进行处理，右侧进行处理，以此递归，直到<strong>左侧下标大于右侧下标</strong>，最终数据将变得有序.</p></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Part</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> X = array[start];</span><br><span class="line"><span class="keyword">while</span>(start &lt; end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(array[end] &gt; X &amp;&amp; start &lt; end)             <span class="comment">//越界检查</span></span><br><span class="line">&#123;</span><br><span class="line">end--;                                       <span class="comment">//找到右侧第一个比参考值小的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(start &lt; end)                                  <span class="comment">//越界检查</span></span><br><span class="line">&#123;</span><br><span class="line">array[start] = array[end];                   <span class="comment">//交换</span></span><br><span class="line">start++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(array[start] &lt; X &amp;&amp; start &lt; end)           <span class="comment">//越界检查</span></span><br><span class="line">&#123;</span><br><span class="line">start++;                                     <span class="comment">//找到左侧第一个比参考值大的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(start &lt; end)                                  <span class="comment">//越界检查</span></span><br><span class="line">&#123;</span><br><span class="line">array[end] = array[start];                   <span class="comment">//交换</span></span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//循环结束：start == end</span></span><br><span class="line">array[start] = X;</span><br><span class="line"><span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(start &gt;= end)                                     <span class="comment">//越界检查</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> part = <span class="built_in">Part</span>(array, start, end);</span><br><span class="line">    <span class="comment">//分治</span></span><br><span class="line"><span class="built_in">Sort</span>(array, start, part - <span class="number">1</span>);                        <span class="comment">//左半边</span></span><br><span class="line"><span class="built_in">Sort</span>(array, part + <span class="number">1</span>, end);                          <span class="comment">//右半边</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="end"><a href="#END" class="headerlink" title="END"></a>END</h3><blockquote><p>快速排序是一种性能较高的排序. 递归可能有点难以理解，最好自己拿数据试一试.<br>接下来还有快速、堆、桶排序等.</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法-排序&quot;&gt;&lt;a href=&quot;#算法-排序&quot; class=&quot;headerlink&quot; title=&quot;算法-排序&quot;&gt;&lt;/a&gt;算法-排序&lt;/h1&gt;&lt;h2 id=&quot;4-快速排序&quot;&gt;&lt;a href=&quot;#4-快速排序&quot; class=&quot;headerlink&quot; title=&quot;4 快速排序&quot;&gt;&lt;/a&gt;4 快速排序&lt;/h2&gt;</summary>
    
    
    
    <category term="Cpp" scheme="https://blog.jerryzrf.cf/categories/Cpp/"/>
    
    
    <category term="Cpp" scheme="https://blog.jerryzrf.cf/tags/Cpp/"/>
    
    <category term="算法" scheme="https://blog.jerryzrf.cf/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-排序-插入</title>
    <link href="https://blog.jerryzrf.cf/2021/07/17/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E6%8F%92%E5%85%A5/"/>
    <id>https://blog.jerryzrf.cf/2021/07/17/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E6%8F%92%E5%85%A5/</id>
    <published>2021-07-17T05:20:02.000Z</published>
    <updated>2021-07-18T11:40:25.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法-排序"><a href="#算法-排序" class="headerlink" title="算法-排序"></a>算法-排序</h1><h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3 插入排序"></a>3 插入排序</h2><span id="more"></span><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote><ul><li>简单</li><li>对少量数据性能较好</li><li>稳定</li></ul></blockquote><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>插入排序，顾名思义，把待排序的数据插入到应该在的位置.</p></blockquote><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><blockquote><p>原始数据(8个)<br>7 4 8 3 2 5 1 6</p></blockquote><blockquote><p>第一次排序<br>7 4 8 3 2 5 1 6</p></blockquote><blockquote><p>第二次排序<br>4 7 8 3 2 5 1 6</p></blockquote><blockquote><p>第三次排序<br>4 7 8 3 2 5 1 6</p></blockquote><blockquote><p>第四次排序<br>3 4 7 8 2 5 1 6</p></blockquote><blockquote><p>第五次排序<br>2 3 4 7 8 5 1 6</p></blockquote><blockquote><p>第六次排序<br>2 3 4 5 7 8 1 6</p></blockquote><blockquote><p>第七次排序<br>1 2 3 4 5 7 8 6</p></blockquote><blockquote><p>第八次排序<br>1 2 3 4 5 6 7 8</p></blockquote><h3 id="演示解析"><a href="#演示解析" class="headerlink" title="演示解析"></a>演示解析</h3><blockquote><p>第 i 次排序，是将a[i]从 i 向前移动 j 个数字，直到a[j]小于a[i]。</p></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; array[j] &lt; array[j - <span class="number">1</span>]; j--)  <span class="comment">//当a[j]大于a[j - i]且没越界</span></span><br><span class="line"><span class="built_in">swap</span>(array[j], array[j - <span class="number">1</span>]);                      <span class="comment">//向后移动</span></span><br><span class="line">array[j - <span class="number">1</span>] = array[i];                               <span class="comment">//填充空位</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="end"><a href="#END" class="headerlink" title="END"></a>END</h3><blockquote><p>插入排序依旧是一中较为简单的排序，接下来还有快速、堆、桶排序等。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法-排序&quot;&gt;&lt;a href=&quot;#算法-排序&quot; class=&quot;headerlink&quot; title=&quot;算法-排序&quot;&gt;&lt;/a&gt;算法-排序&lt;/h1&gt;&lt;h2 id=&quot;3-插入排序&quot;&gt;&lt;a href=&quot;#3-插入排序&quot; class=&quot;headerlink&quot; title=&quot;3 插入排序&quot;&gt;&lt;/a&gt;3 插入排序&lt;/h2&gt;</summary>
    
    
    
    <category term="Cpp" scheme="https://blog.jerryzrf.cf/categories/Cpp/"/>
    
    
    <category term="Cpp" scheme="https://blog.jerryzrf.cf/tags/Cpp/"/>
    
    <category term="算法" scheme="https://blog.jerryzrf.cf/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-排序-选择</title>
    <link href="https://blog.jerryzrf.cf/2021/07/17/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E9%80%89%E6%8B%A9/"/>
    <id>https://blog.jerryzrf.cf/2021/07/17/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E9%80%89%E6%8B%A9/</id>
    <published>2021-07-17T03:35:11.000Z</published>
    <updated>2021-07-18T11:40:34.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法-排序"><a href="#算法-排序" class="headerlink" title="算法-排序"></a>算法-排序</h1><h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2 选择排序"></a>2 选择排序</h2><span id="more"></span><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote><ul><li>不稳定(<del>你也许没听懂</del>)</li><li>较简单(至少我认为)</li></ul></blockquote><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>选择排序，顾名思义，选择一个数，放到相应的位置.</p></blockquote><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><blockquote><p>原始数据(8个)<br>7 4 8 3 2 5 1 6</p></blockquote><blockquote><p>第一次排序<br>1 4 8 3 2 5 7 6</p></blockquote><blockquote><p>第二次排序<br>1 2 8 3 4 5 7 6</p></blockquote><blockquote><p>第三次排序<br>1 2 3 8 4 5 7 6</p></blockquote><blockquote><p>第四次排序<br>1 2 3 4 8 5 7 6</p></blockquote><blockquote><p>第五次排序<br>1 2 3 4 5 8 7 6</p></blockquote><blockquote><p>第六次排序<br>1 2 3 4 5 6 7 8</p></blockquote><h3 id="演示解析"><a href="#演示解析" class="headerlink" title="演示解析"></a>演示解析</h3><blockquote><p>从数据变化中我们可以看出，每一次都选择了<strong>未排序</strong>的子序列中的最小值和当前<strong>要排序</strong>的值进行交换.</p></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindiMin</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> n, <span class="keyword">int</span> start)</span>  <span class="comment">//找到array[start] ~ array[n - 1]中的最小值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> imin = start;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = start + <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(array[i] &lt; array[imin])</span><br><span class="line">&#123;</span><br><span class="line">imin = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> imin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> imin = <span class="built_in">FindiMin</span>(array, n, i);</span><br><span class="line"><span class="built_in">swap</span>(array[imin], array[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="end"><a href="#END" class="headerlink" title="END"></a>END</h3><blockquote><p>选择排序还是一种比较简单的排序方法，接下来还有插入、快速、堆、桶排序等.</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法-排序&quot;&gt;&lt;a href=&quot;#算法-排序&quot; class=&quot;headerlink&quot; title=&quot;算法-排序&quot;&gt;&lt;/a&gt;算法-排序&lt;/h1&gt;&lt;h2 id=&quot;2-选择排序&quot;&gt;&lt;a href=&quot;#2-选择排序&quot; class=&quot;headerlink&quot; title=&quot;2 选择排序&quot;&gt;&lt;/a&gt;2 选择排序&lt;/h2&gt;</summary>
    
    
    
    <category term="Cpp" scheme="https://blog.jerryzrf.cf/categories/Cpp/"/>
    
    
    <category term="Cpp" scheme="https://blog.jerryzrf.cf/tags/Cpp/"/>
    
    <category term="算法" scheme="https://blog.jerryzrf.cf/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-排序-冒泡</title>
    <link href="https://blog.jerryzrf.cf/2021/07/16/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E5%86%92%E6%B3%A1/"/>
    <id>https://blog.jerryzrf.cf/2021/07/16/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E5%86%92%E6%B3%A1/</id>
    <published>2021-07-16T08:15:30.000Z</published>
    <updated>2021-07-18T12:31:48.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法-排序"><a href="#算法-排序" class="headerlink" title="算法-排序"></a>算法-排序</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>有人可能会说，STL库中不是有sort函数吗，为什么还有学排序呢？<br>因为排序的基本算法还有很多功能，如快速排序的求第k小(大)的数、插入排序的一元多项式等等。</p></blockquote><h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1 冒泡排序"></a>1 冒泡排序</h2><span id="more"></span><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote><ul><li>简单(至少我个人认为)</li><li>稳定(<del>你也许没听懂</del>)</li></ul></blockquote><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>冒泡排序，顾名思义，小的数据像泡泡一样向上(前)浮(移动).</p></blockquote><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><blockquote><p>原始数据(8个)<br>7 4 8 3 2 5 1 6</p></blockquote><blockquote><p>第一次排序<br>4 7 3 2 5 1 6 8</p></blockquote><blockquote><p>第二次排序<br>4 3 2 5 1 6 7 8</p></blockquote><blockquote><p>第三次排序<br>3 2 4 1 5 6 7 8</p></blockquote><blockquote><p>第四次排序<br>2 3 1 4 5 6 7 8</p></blockquote><blockquote><p>第五次排序<br>2 1 3 4 5 6 7 8</p></blockquote><blockquote><p>第六次排序<br>1 2 3 4 5 6 7 8</p></blockquote><h3 id="演示解析"><a href="#演示解析" class="headerlink" title="演示解析"></a>演示解析</h3><blockquote><p>从数据变化中我们可以看出，小的数据一直再向前走，大的数据一直在向后走，就像泡泡一样，向上浮。</p></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="version-1-基本版本"><a href="#Version-1-基本版本" class="headerlink" title="Version 1 基本版本"></a>Version 1 基本版本</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)               <span class="comment">//需要走num遍排序</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num - <span class="number">1</span>; j++)       <span class="comment">//从0比较到num-1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(array[j] &gt; array[j + <span class="number">1</span>])        <span class="comment">//和后面一个数比较</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(array[j], array[j + <span class="number">1</span>]);  <span class="comment">//交换</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 在这个版本中，我们可以看到需要走num遍排序，时间复杂度是O(num^2)。而像演示一样的情况中，后面两次其实是不用走到，所以我们就要一个判断，判断数据是否已经有序。</p></blockquote><h4 id="version-2-改进版本"><a href="#Version-2-改进版本" class="headerlink" title="Version 2 改进版本"></a>Version 2 改进版本</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">true</span>;                              <span class="comment">//是否有序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num - <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(array[j] &gt; array[j + <span class="number">1</span>])           <span class="comment">//更小</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(array[j], array[j + <span class="number">1</span>]);     <span class="comment">//交换</span></span><br><span class="line">flag = <span class="literal">false</span>;                     <span class="comment">//依旧无序</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="literal">true</span>)                          <span class="comment">//已经有序</span></span><br><span class="line"><span class="keyword">break</span>;                                <span class="comment">//跳出循环</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有了有序特判，算法的性能有了小幅提高。</p></blockquote><h3 id="end"><a href="#END" class="headerlink" title="END"></a>END</h3><blockquote><p>冒泡排序还是一种比较简单的排序方法，接下来还有选择、插入、快速、堆、桶排序等。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法-排序&quot;&gt;&lt;a href=&quot;#算法-排序&quot; class=&quot;headerlink&quot; title=&quot;算法-排序&quot;&gt;&lt;/a&gt;算法-排序&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;有人可能会说，STL库中不是有sort函数吗，为什么还有学排序呢？&lt;br&gt;因为排序的基本算法还有很多功能，如快速排序的求第k小(大)的数、插入排序的一元多项式等等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-冒泡排序&quot;&gt;&lt;a href=&quot;#1-冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;1 冒泡排序&quot;&gt;&lt;/a&gt;1 冒泡排序&lt;/h2&gt;</summary>
    
    
    
    <category term="Cpp" scheme="https://blog.jerryzrf.cf/categories/Cpp/"/>
    
    
    <category term="Cpp" scheme="https://blog.jerryzrf.cf/tags/Cpp/"/>
    
    <category term="算法" scheme="https://blog.jerryzrf.cf/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博文</title>
    <link href="https://blog.jerryzrf.cf/2021/07/14/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/"/>
    <id>https://blog.jerryzrf.cf/2021/07/14/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/</id>
    <published>2021-07-14T13:03:05.000Z</published>
    <updated>2021-07-17T10:39:56.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一篇博文"><a href="#第一篇博文" class="headerlink" title="第一篇博文"></a>第一篇博文</h1><h2 id="hello-world"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>JerryZRF 的 Blog 的第一篇博文<br>发布于 2021-7-14 21:05</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一篇博文&quot;&gt;&lt;a href=&quot;#第一篇博文&quot; class=&quot;headerlink&quot; title=&quot;第一篇博文&quot;&gt;&lt;/a&gt;第一篇博文&lt;/h1&gt;&lt;h2 id=&quot;hello-world&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="日志" scheme="https://blog.jerryzrf.cf/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="日志" scheme="https://blog.jerryzrf.cf/tags/%E6%97%A5%E5%BF%97/"/>
    
    <category term="时刻" scheme="https://blog.jerryzrf.cf/tags/%E6%97%B6%E5%88%BB/"/>
    
  </entry>
  
</feed>
