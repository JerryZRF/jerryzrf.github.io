<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>第一篇博文</title>
    <url>/2021/07/14/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/</url>
    <content><![CDATA[<h1 id="第一篇博文"><a href="#第一篇博文" class="headerlink" title="第一篇博文"></a>第一篇博文</h1><h2 id="hello-world"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>JerryZRF 的 Blog 的第一篇博文<br>发布于 2021-7-14 21:05</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>时刻</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-最长公共子串</title>
    <url>/2021/07/18/%E7%AE%97%E6%B3%95-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="算法-字符串"><a href="#算法-字符串" class="headerlink" title="算法-字符串"></a>算法-字符串</h1><h2 id="1-最长公共子串"><a href="#1-最长公共子串" class="headerlink" title="1 最长公共子串"></a>1 最长公共子串</h2><span id="more"></span>

<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>在两个字符串中，找到最长公共子串(Longest Common Subsequence)的长度.<br><del>即最长的相同的一段的长度</del></p>
</blockquote>
<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><blockquote>
<p>字符串A: “abcjerryzrfdef”<br>字符串B: “ajerryzrfbcdefgh”</p>
<p>它们的最长公共子串的长度为8.</p>
</blockquote>
<h3 id="演示解析"><a href="#演示解析" class="headerlink" title="演示解析"></a>演示解析</h3><blockquote>
<p>字符串A: “abc<strong>jerryzrf</strong>de”<br>字符串B: “a<strong>jerryzrf</strong>b”</p>
<p>他们的最长公共子串为”jerryzrf”.</p>
</blockquote>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="version-1-暴力枚举"><a href="#Version-1-暴力枚举" class="headerlink" title="Version 1 (暴力枚举)"></a>Version 1 (暴力枚举)</h4><p><del>暴力枚举yyds</del></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLCSLength</span><span class="params">(string &amp;strA, string &amp;strB)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> lengthA = strA.<span class="built_in">length</span>();</span><br><span class="line">	<span class="keyword">int</span> lengthB = strB.<span class="built_in">length</span>();</span><br><span class="line">	<span class="keyword">int</span> length = <span class="number">0</span>;     <span class="comment">//公共子串长度</span></span><br><span class="line">	<span class="keyword">int</span> MaxLength = <span class="number">0</span>;  <span class="comment">//最长公共子串长度</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lengthA; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lengthB; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(strA[i] == strB[j] &amp;&amp; i &lt; lengthA &amp;&amp; j &lt; lengthB)  <span class="comment">//找到公共子序列</span></span><br><span class="line">			&#123;</span><br><span class="line">				i++;</span><br><span class="line">				j++;</span><br><span class="line">				length++;</span><br><span class="line">			&#125;</span><br><span class="line">			MaxLength = <span class="built_in">max</span>(length, MaxLength);                      <span class="comment">//更新最长公共子串长度</span></span><br><span class="line">			length = <span class="number">0</span>;                                              <span class="comment">//公共子串长度归零</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> MaxLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以看到这种暴力枚举的性能在大量数据情况下很差，时间复杂度大概为O(lengthA * lengthB)，接下来我们用上另一种算法.</p>
</blockquote>
<h4 id="version-2-数组矩阵"><a href="#Version-2-数组矩阵" class="headerlink" title="Version 2 (数组矩阵)"></a>Version 2 (数组矩阵)</h4><blockquote>
<p>求最长公共子串长度，就是求字符串A和字符串B中最长重复的地方的长度，于是我们可以摆出字符串A和字符串B中重复的地方，把它们放成矩阵.</p>
<p>如<br>字符串A: “abc<strong>jerryzrf</strong>de”<br>字符串B: “a<strong>jerryzrf</strong>b”<br>&nbsp;&nbsp;&nbsp;a  b  c &nbsp;j&nbsp;e&nbsp;r&nbsp; r&nbsp; y  z  r &nbsp;f<br>a  1  0  0  0  0  0 0  0  0  0  0<br>j   0  0  0  <strong>1</strong>  0  0 0  0  0  0  0<br>e  0  0  0  0  <strong>1</strong>  0 0  0  0  0  0<br>r   0  0  0  0  0  <strong>1</strong> 1  0  0  1  1<br>r   0  0  0  0  0  1 <strong>1</strong>  0  0  1  1<br>y   0 0  0  0  0  0 0  <strong>1</strong>  0  0   0<br>z   0 0  0  0  0  0 0  0  <strong>1</strong>  0   0<br>r   0 0  0  0  0  0 0  0  0  <strong>1</strong>   0<br>f   0 0  0  0  0  0 0  0  0  0   <strong>1</strong><br>b  0 1  0  0  0  0 0  0  0  0   0</p>
<p>从中我们可以发现，公共子串就是一条斜线.<br>所以我们可以写一个函数，求出每一条斜线中连续部分的长度，其中最长的，即为最长公共子串的长度</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在(lengthA * lengthB)的矩阵中，获取从 k 开始的斜线长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetObliqueLength</span><span class="params">(<span class="keyword">bool</span> matrix[][<span class="number">100001</span>], <span class="keyword">int</span> lengthA, <span class="keyword">int</span> lengthB, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> ObliqueLine[<span class="number">100001</span>]; <span class="comment">//斜线</span></span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;              <span class="comment">//斜线长度</span></span><br><span class="line">	<span class="keyword">int</span> x, y;                 <span class="comment">//开始的(x, y)坐标</span></span><br><span class="line">	<span class="keyword">if</span>(k &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		x = -k;</span><br><span class="line">		y = <span class="number">0</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		x = <span class="number">0</span>;</span><br><span class="line">		y = k;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(x &lt; lengthA &amp;&amp; y &lt; lengthB)</span><br><span class="line">	&#123;</span><br><span class="line">		ObliqueLine[cnt++] = matrix[x++][y++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> length = <span class="number">0</span>;          <span class="comment">//连续斜线长度</span></span><br><span class="line">	<span class="keyword">int</span> MaxLength = <span class="number">0</span>;       <span class="comment">//最长连续斜线长度</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(ObliqueLine[i] == <span class="literal">false</span>)              <span class="comment">//不连续</span></span><br><span class="line">		&#123;</span><br><span class="line">			MaxLength = <span class="built_in">max</span>(length, MaxLength);  <span class="comment">//更新最长连续斜线长度</span></span><br><span class="line">			length = <span class="number">0</span>;                          <span class="comment">//连续斜线长度归零</span></span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		length++;                                <span class="comment">//连续斜线长度增加</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">max</span>(length, MaxLength);               <span class="comment">//返回最长连续斜线长度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取最长公共子串的长度</span></span><br><span class="line"><span class="comment">//Longest Common Subsequence</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLCSLength</span><span class="params">(string &amp;strA, string &amp;strB)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> lengthA = strA.<span class="built_in">length</span>();</span><br><span class="line">	<span class="keyword">int</span> lengthB = strB.<span class="built_in">length</span>();</span><br><span class="line">	<span class="comment">//转换为矩阵</span></span><br><span class="line">	<span class="keyword">bool</span> matrix[lengthA][<span class="number">100001</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lengthA; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lengthB; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			matrix[i][j] = strA[i] == strB[j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//找到最长连续子串</span></span><br><span class="line">	<span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = -lengthA + <span class="number">1</span>; i &lt; lengthB; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> length = <span class="built_in">GetObliqueLength</span>(matrix, lengthA, lengthB, i);</span><br><span class="line">		max = (length &gt; max) ? length : max;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该版本用的是数组写的，<del>可能有点丑</del>，接下来是一个用vector写的.</p>
</blockquote>
<h4 id="version-3-vector矩阵"><a href="#Version-3-vector矩阵" class="headerlink" title="Version 3 (vector矩阵)"></a>Version 3 (vector矩阵)</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在(lengthA * lengthB)的矩阵中，获取从 k 开始的斜线长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetObliqueLength</span><span class="params">(vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt; &amp;matrix, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="keyword">bool</span>&gt; ObliqueLine; <span class="comment">//斜线</span></span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;              <span class="comment">//斜线长度</span></span><br><span class="line">	<span class="keyword">int</span> x, y;                 <span class="comment">//开始的(x, y)坐标</span></span><br><span class="line">	<span class="keyword">if</span>(k &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		x = -k;</span><br><span class="line">		y = <span class="number">0</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		x = <span class="number">0</span>;</span><br><span class="line">		y = k;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(x &lt; matrix.<span class="built_in">size</span>() &amp;&amp; y &lt; matrix[<span class="number">0</span>].<span class="built_in">size</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		ObliqueLine.<span class="built_in">push_back</span>(matrix[x++][y++]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> length = <span class="number">0</span>;          <span class="comment">//连续斜线长度</span></span><br><span class="line">	<span class="keyword">int</span> MaxLength = <span class="number">0</span>;       <span class="comment">//最长连续斜线长度</span></span><br><span class="line">	<span class="keyword">for</span>(vector&lt;<span class="keyword">bool</span>&gt;::iterator it = ObliqueLine.<span class="built_in">begin</span>(); it != ObliqueLine.<span class="built_in">end</span>(); it++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(*it == <span class="literal">false</span>)                         <span class="comment">//不连续</span></span><br><span class="line">		&#123;</span><br><span class="line">			MaxLength = <span class="built_in">max</span>(length, MaxLength);  <span class="comment">//更新最长连续斜线长度</span></span><br><span class="line">			length = <span class="number">0</span>;                          <span class="comment">//连续斜线长度归零</span></span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		length++;                                <span class="comment">//连续斜线长度增加</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">max</span>(length, MaxLength);               <span class="comment">//返回最长连续斜线长度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取最长公共子串的长度</span></span><br><span class="line"><span class="comment">//Longest Common Subsequence</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLCSLength</span><span class="params">(string &amp;strA, string &amp;strB)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> lengthA = strA.<span class="built_in">length</span>();</span><br><span class="line">	<span class="keyword">int</span> lengthB = strB.<span class="built_in">length</span>();</span><br><span class="line">	<span class="comment">//转换为矩阵</span></span><br><span class="line">	vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt; <span class="built_in">matrix</span>(lengthA, vector&lt;<span class="keyword">bool</span>&gt;(lengthB, <span class="literal">false</span>));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lengthA; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lengthB; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			matrix[i][j] = strA[i] == strB[j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//找到最长连续子串</span></span><br><span class="line">	<span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = -lengthA + <span class="number">1</span>; i &lt; lengthB; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> length = <span class="built_in">GetObliqueLength</span>(matrix, i);</span><br><span class="line">		max = (length &gt; max) ? length : max;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>别忘了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="end"><a href="#END" class="headerlink" title="END"></a>END</h3><blockquote>
<p>本文就到这里了，接下来你可以自己写一个函数，求出最长公共子串和其长度.<br><del>暴力枚举yyds!</del></p>
</blockquote>
]]></content>
      <categories>
        <category>Cpp</category>
      </categories>
      <tags>
        <tag>Cpp</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-排序-堆</title>
    <url>/2021/07/18/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E5%A0%86/</url>
    <content><![CDATA[<h1 id="算法-排序"><a href="#算法-排序" class="headerlink" title="算法-排序"></a>算法-排序</h1><h2 id="5-堆排序"><a href="#5-堆排序" class="headerlink" title="5 堆排序"></a>5 堆排序</h2><span id="more"></span>

<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote>
<ul>
<li>不稳定</li>
<li>较难理解(一时的)</li>
</ul>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>堆排序，顾名思义，用”堆”(完全二叉树)来排序.</p>
<p>堆又分两种：小根堆(分支节点小于它的子节点)(降序)、大根堆(分支节点大于它的子节点)(升序).</p>
<p>经过实验得知，完全二叉树的最后一个分支节点是n / 2 - 1.</p>
</blockquote>
<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><blockquote>
<p>原始数据(8个)<br>7 4 8 3 2 5 1 6</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">       7</span><br><span class="line">    4     8</span><br><span class="line">  3  2  5  1</span><br><span class="line">6  </span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="建堆"><a href="#建堆" class="headerlink" title="建堆"></a>建堆</h4><p>从下至上，依次调整分支节点 </p>
<blockquote>
<p>i = 3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">       7</span><br><span class="line">    4     8</span><br><span class="line">  3  2  5  1</span><br><span class="line">6  </span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>i = 2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">       7</span><br><span class="line">    4     1</span><br><span class="line">  3  2  5  8</span><br><span class="line">6  </span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>i = 1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">       7</span><br><span class="line">    2    1</span><br><span class="line">  3  4  5  8</span><br><span class="line">6  </span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>i = 0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">       1</span><br><span class="line">    2    5</span><br><span class="line">  3  4  5  8</span><br><span class="line">6  </span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="排序出堆"><a href="#排序-出堆" class="headerlink" title="排序(出堆)"></a>排序(出堆)</h4><p>首尾交换，调整根节点 </p>
<blockquote>
<p>i = 7</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        2</span><br><span class="line">     3    5</span><br><span class="line">   6  4  7  8</span><br><span class="line">(1)</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>i = 6</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        3</span><br><span class="line">     4    5</span><br><span class="line">   6  8  7 (2)</span><br><span class="line">(1)</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>i = 5</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        4</span><br><span class="line">     6     5</span><br><span class="line">   7  8 (3) (2)</span><br><span class="line">(1)</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>i = 4</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">       5</span><br><span class="line">    6     8</span><br><span class="line">  7 (4) (3) (2)</span><br><span class="line">(1)</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>i = 3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">         6</span><br><span class="line">     7       8</span><br><span class="line">  (5) (4) (3) (2)</span><br><span class="line">(1)</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>i = 2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">          7</span><br><span class="line">     8      (6)</span><br><span class="line">  (5) (4) (3) (2)</span><br><span class="line">(1)</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>i = 1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">          8</span><br><span class="line">    (7)     (6)</span><br><span class="line">  (5) (4) (3) (2)</span><br><span class="line">(1)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>至此，数据已经变成有序.</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在有n个节点的堆中调整第k个节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapShift</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(k * <span class="number">2</span> + <span class="number">1</span> &lt; n)                               <span class="comment">//为分支节点(有孩子)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> child = k * <span class="number">2</span> + <span class="number">1</span>;                                <span class="comment">//左右孩子的最小值的下标，默认为左孩子的下标		</span></span><br><span class="line">		<span class="keyword">if</span>(child + <span class="number">1</span> &lt; n &amp;&amp; array[child + <span class="number">1</span>] &lt; array[child])  <span class="comment">//有右孩子，且比左孩子小</span></span><br><span class="line">		&#123;</span><br><span class="line">			child++;                                   <span class="comment">//更新左右孩子的最小值的下标为右孩子的下标</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(array[child] &gt; array[k])                    <span class="comment">//左右孩子的最小值比父大(调整完毕)</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span>;                                    <span class="comment">//结束</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">swap</span>(array[child], array[k]);                  <span class="comment">//交换</span></span><br><span class="line">		k = child;                                     <span class="comment">//调整下一个	</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//建堆：从下至上依次调整分支节点</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = n / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">HeapShift</span>(array, n, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//排序(出堆)：首尾交换，调整根节点</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">swap</span>(array[<span class="number">0</span>], array[i]);</span><br><span class="line">		<span class="built_in">HeapShift</span>(array, i, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="end"><a href="#END" class="headerlink" title="END"></a>END</h3><blockquote>
<p>堆排序理解起来可能有点困难，需要你多用数据模拟几次.</p>
<p>接下来还有桶、希尔排序等.</p>
</blockquote>
]]></content>
      <categories>
        <category>Cpp</category>
      </categories>
      <tags>
        <tag>Cpp</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-排序-快速</title>
    <url>/2021/07/17/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E5%BF%AB%E9%80%9F/</url>
    <content><![CDATA[<h1 id="算法-排序"><a href="#算法-排序" class="headerlink" title="算法-排序"></a>算法-排序</h1><h2 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4 快速排序"></a>4 快速排序</h2><span id="more"></span>

<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote>
<ul>
<li>不稳定</li>
<li>平均性能高</li>
</ul>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p><del>快速排序，顾名思义，很快</del>.</p>
<p>STL库中的sort()函数用的就是快速排序.</p>
</blockquote>
<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><blockquote>
<p>原始数据(8个)<br>X 4 8 3 2 5 1 6<br>基准值 X = 7</p>
</blockquote>
<blockquote>
<p>第一次处理<br>6 4 8 3 2 5 1 X<br>i                      j</p>
</blockquote>
<blockquote>
<p>第二次处理<br>6 4 X 3 2 5 1 8<br>       i               j</p>
</blockquote>
<blockquote>
<p>第三次处理<br>6 4 1 3 2 5 X 8<br>       i               j</p>
</blockquote>
<blockquote>
<p>第四次处理<br>6 4 1 3 2 5 X 8<br>                   ij</p>
</blockquote>
<blockquote>
<p>放回原位</p>
<p>6 4 1 3 2 5 7 8</p>
</blockquote>
<h3 id="演示解析"><a href="#演示解析" class="headerlink" title="演示解析"></a>演示解析</h3><blockquote>
<p>经过处理，数据变成了<strong>两部分</strong>。在a[i]左侧的是比它小的数字，右侧的是比它大的数字.<br>我们再将左侧进行处理，右侧进行处理，以此递归，直到<strong>左侧下标大于右侧下标</strong>，最终数据将变得有序.</p>
</blockquote>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Part</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> X = array[start];</span><br><span class="line">	<span class="keyword">while</span>(start &lt; end)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(array[end] &gt; X &amp;&amp; start &lt; end)             <span class="comment">//越界检查</span></span><br><span class="line">		&#123;</span><br><span class="line">			end--;                                       <span class="comment">//找到右侧第一个比参考值小的	</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(start &lt; end)                                  <span class="comment">//越界检查</span></span><br><span class="line">		&#123;</span><br><span class="line">			array[start] = array[end];                   <span class="comment">//交换</span></span><br><span class="line">			start++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(array[start] &lt; X &amp;&amp; start &lt; end)           <span class="comment">//越界检查</span></span><br><span class="line">		&#123;</span><br><span class="line">			start++;                                     <span class="comment">//找到左侧第一个比参考值大的	</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(start &lt; end)                                  <span class="comment">//越界检查</span></span><br><span class="line">		&#123;</span><br><span class="line">			array[end] = array[start];                   <span class="comment">//交换</span></span><br><span class="line">			end--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//循环结束：start == end</span></span><br><span class="line">	array[start] = X;</span><br><span class="line">	<span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(start &gt;= end)                                     <span class="comment">//越界检查</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">int</span> part = <span class="built_in">Part</span>(array, start, end);</span><br><span class="line">    <span class="comment">//分治</span></span><br><span class="line">	<span class="built_in">Sort</span>(array, start, part - <span class="number">1</span>);                        <span class="comment">//左半边</span></span><br><span class="line">	<span class="built_in">Sort</span>(array, part + <span class="number">1</span>, end);                          <span class="comment">//右半边</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="end"><a href="#END" class="headerlink" title="END"></a>END</h3><blockquote>
<p>快速排序是一种性能较高的排序. 递归可能有点难以理解，最好自己拿数据试一试.<br>接下来还有快速、堆、桶排序等.</p>
</blockquote>
]]></content>
      <categories>
        <category>Cpp</category>
      </categories>
      <tags>
        <tag>Cpp</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-排序-插入</title>
    <url>/2021/07/17/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E6%8F%92%E5%85%A5/</url>
    <content><![CDATA[<h1 id="算法-排序"><a href="#算法-排序" class="headerlink" title="算法-排序"></a>算法-排序</h1><h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3 插入排序"></a>3 插入排序</h2><span id="more"></span>

<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote>
<ul>
<li>简单</li>
<li>对少量数据性能较好</li>
<li>稳定</li>
</ul>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>插入排序，顾名思义，把待排序的数据插入到应该在的位置.</p>
</blockquote>
<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><blockquote>
<p>原始数据(8个)<br>7 4 8 3 2 5 1 6</p>
</blockquote>
<blockquote>
<p>第一次排序<br>7 4 8 3 2 5 1 6</p>
</blockquote>
<blockquote>
<p>第二次排序<br>4 7 8 3 2 5 1 6</p>
</blockquote>
<blockquote>
<p>第三次排序<br>4 7 8 3 2 5 1 6</p>
</blockquote>
<blockquote>
<p>第四次排序<br>3 4 7 8 2 5 1 6</p>
</blockquote>
<blockquote>
<p>第五次排序<br>2 3 4 7 8 5 1 6</p>
</blockquote>
<blockquote>
<p>第六次排序<br>2 3 4 5 7 8 1 6</p>
</blockquote>
<blockquote>
<p>第七次排序<br>1 2 3 4 5 7 8 6</p>
</blockquote>
<blockquote>
<p>第八次排序<br>1 2 3 4 5 6 7 8</p>
</blockquote>
<h3 id="演示解析"><a href="#演示解析" class="headerlink" title="演示解析"></a>演示解析</h3><blockquote>
<p>第 i 次排序，是将a[i]从 i 向前移动 j 个数字，直到a[j]小于a[i]。</p>
</blockquote>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> j;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; array[j] &lt; array[j - <span class="number">1</span>]; j--)  <span class="comment">//当a[j]大于a[j - i]且没越界</span></span><br><span class="line">			<span class="built_in">swap</span>(array[j], array[j - <span class="number">1</span>]);                      <span class="comment">//向后移动</span></span><br><span class="line">		array[j - <span class="number">1</span>] = array[i];                               <span class="comment">//填充空位</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="end"><a href="#END" class="headerlink" title="END"></a>END</h3><blockquote>
<p>插入排序依旧是一中较为简单的排序，接下来还有快速、堆、桶排序等。</p>
</blockquote>
]]></content>
      <categories>
        <category>Cpp</category>
      </categories>
      <tags>
        <tag>Cpp</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-排序-选择</title>
    <url>/2021/07/17/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[<h1 id="算法-排序"><a href="#算法-排序" class="headerlink" title="算法-排序"></a>算法-排序</h1><h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2 选择排序"></a>2 选择排序</h2><span id="more"></span>

<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote>
<ul>
<li>不稳定(<del>你也许没听懂</del>)</li>
<li>较简单(至少我认为)</li>
</ul>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>选择排序，顾名思义，选择一个数，放到相应的位置.</p>
</blockquote>
<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><blockquote>
<p>原始数据(8个)<br>7 4 8 3 2 5 1 6</p>
</blockquote>
<blockquote>
<p>第一次排序<br>1 4 8 3 2 5 7 6</p>
</blockquote>
<blockquote>
<p>第二次排序<br>1 2 8 3 4 5 7 6</p>
</blockquote>
<blockquote>
<p>第三次排序<br>1 2 3 8 4 5 7 6</p>
</blockquote>
<blockquote>
<p>第四次排序<br>1 2 3 4 8 5 7 6</p>
</blockquote>
<blockquote>
<p>第五次排序<br>1 2 3 4 5 8 7 6</p>
</blockquote>
<blockquote>
<p>第六次排序<br>1 2 3 4 5 6 7 8</p>
</blockquote>
<h3 id="演示解析"><a href="#演示解析" class="headerlink" title="演示解析"></a>演示解析</h3><blockquote>
<p>从数据变化中我们可以看出，每一次都选择了<strong>未排序</strong>的子序列中的最小值和当前<strong>要排序</strong>的值进行交换.</p>
</blockquote>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindiMin</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> n, <span class="keyword">int</span> start)</span>  <span class="comment">//找到array[start] ~ array[n - 1]中的最小值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> imin = start;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = start + <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(array[i] &lt; array[imin])</span><br><span class="line">		&#123;</span><br><span class="line">			imin = i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> imin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> imin = <span class="built_in">FindiMin</span>(array, n, i);</span><br><span class="line">		<span class="built_in">swap</span>(array[imin], array[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="end"><a href="#END" class="headerlink" title="END"></a>END</h3><blockquote>
<p>选择排序还是一种比较简单的排序方法，接下来还有插入、快速、堆、桶排序等.</p>
</blockquote>
]]></content>
      <categories>
        <category>Cpp</category>
      </categories>
      <tags>
        <tag>Cpp</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-排序-冒泡</title>
    <url>/2021/07/16/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E5%86%92%E6%B3%A1/</url>
    <content><![CDATA[<h1 id="算法-排序"><a href="#算法-排序" class="headerlink" title="算法-排序"></a>算法-排序</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>有人可能会说，STL库中不是有sort函数吗，为什么还有学排序呢？<br>因为排序的基本算法还有很多功能，如快速排序的求第k小(大)的数、插入排序的一元多项式等等。</p>
</blockquote>
<h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1 冒泡排序"></a>1 冒泡排序</h2><span id="more"></span>

<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote>
<ul>
<li>简单(至少我个人认为)</li>
<li>稳定(<del>你也许没听懂</del>)</li>
</ul>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>冒泡排序，顾名思义，小的数据像泡泡一样向上(前)浮(移动).</p>
</blockquote>
<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><blockquote>
<p>原始数据(8个)<br>7 4 8 3 2 5 1 6</p>
</blockquote>
<blockquote>
<p>第一次排序<br>4 7 3 2 5 1 6 8</p>
</blockquote>
<blockquote>
<p>第二次排序<br>4 3 2 5 1 6 7 8</p>
</blockquote>
<blockquote>
<p>第三次排序<br>3 2 4 1 5 6 7 8</p>
</blockquote>
<blockquote>
<p>第四次排序<br>2 3 1 4 5 6 7 8</p>
</blockquote>
<blockquote>
<p>第五次排序<br>2 1 3 4 5 6 7 8</p>
</blockquote>
<blockquote>
<p>第六次排序<br>1 2 3 4 5 6 7 8</p>
</blockquote>
<h3 id="演示解析"><a href="#演示解析" class="headerlink" title="演示解析"></a>演示解析</h3><blockquote>
<p>从数据变化中我们可以看出，小的数据一直再向前走，大的数据一直在向后走，就像泡泡一样，向上浮。</p>
</blockquote>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="version-1-基本版本"><a href="#Version-1-基本版本" class="headerlink" title="Version 1 基本版本"></a>Version 1 基本版本</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)               <span class="comment">//需要走num遍排序</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num - <span class="number">1</span>; j++)       <span class="comment">//从0比较到num-1</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(array[j] &gt; array[j + <span class="number">1</span>])        <span class="comment">//和后面一个数比较</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">swap</span>(array[j], array[j + <span class="number">1</span>]);  <span class="comment">//交换</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 在这个版本中，我们可以看到需要走num遍排序，时间复杂度是O(num^2)。而像演示一样的情况中，后面两次其实是不用走到，所以我们就要一个判断，判断数据是否已经有序。</p>
</blockquote>
<h4 id="version-2-改进版本"><a href="#Version-2-改进版本" class="headerlink" title="Version 2 改进版本"></a>Version 2 改进版本</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> flag;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		flag = <span class="literal">true</span>;                              <span class="comment">//是否有序</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num - <span class="number">1</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(array[j] &gt; array[j + <span class="number">1</span>])           <span class="comment">//更小</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">swap</span>(array[j], array[j + <span class="number">1</span>]);     <span class="comment">//交换</span></span><br><span class="line">				flag = <span class="literal">false</span>;                     <span class="comment">//依旧无序</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag == <span class="literal">true</span>)                          <span class="comment">//已经有序</span></span><br><span class="line">			<span class="keyword">break</span>;                                <span class="comment">//跳出循环</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>有了有序特判，算法的性能有了小幅提高。</p>
</blockquote>
<h3 id="end"><a href="#END" class="headerlink" title="END"></a>END</h3><blockquote>
<p>冒泡排序还是一种比较简单的排序方法，接下来还有选择、插入、快速、堆、桶排序等。</p>
</blockquote>
]]></content>
      <categories>
        <category>Cpp</category>
      </categories>
      <tags>
        <tag>Cpp</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
